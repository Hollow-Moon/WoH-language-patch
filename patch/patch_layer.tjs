
global.image_extensions = [".webp", ".png", ".tlg", ".jpg", ".bmp"];

global.chop_image_extension = function(storage)
{
	var image_extensions = global.image_extensions;

	if (image_extensions.find(global.Storages.extractStorageExt(storage)) !== -1)
	{
		var file_name_no_ext = storage;
		var file_name_len = storage.length;

		for (var i = 0, internal_forloop_count = image_extensions.count; i < internal_forloop_count; i += 1)
		{
			var file_name_ext_pos = file_name_no_ext.indexOf(image_extensions[i]);
			if ((file_name_ext_pos !== -1) && (file_name_ext_pos + image_extensions[i].length === file_name_len))
			{
				file_name_no_ext = file_name_no_ext.substring(0, file_name_ext_pos);
				break;
			}
		}
		return file_name_no_ext;
	}


	return storage;
};

global.get_file_name_of_image_with_extension_that_exists = function(storage)
{
	var image_extensions = global.image_extensions;

	if (image_extensions.find(global.Storages.extractStorageExt(storage)) === -1)
	{
		var file_name_no_ext = storage;
		var file_name_len = storage.length;

		for (var i = 0, internal_forloop_count = image_extensions.count; i < internal_forloop_count; i += 1)
		{
			var file_name_ext_pos = file_name_no_ext.indexOf(image_extensions[i]);
			if ((file_name_ext_pos !== -1) && (file_name_ext_pos + image_extensions[i].length === file_name_len))
			{
				file_name_no_ext = file_name_no_ext.substring(0, file_name_ext_pos);
				break;
			}
		}
		for (var i = 0, internal_forloop_count = image_extensions.count; i < internal_forloop_count; i += 1)
		{
			var fn = file_name_no_ext + image_extensions[i];
			if (global.Storages.isExistentStorage(fn))
			{
				return fn;
			}
		}
	}


	return storage;
};

global.check_if_image_exists = function(storage)
{
	storage += "";
	if (storage === "")
	{
		return false;
	}
	return global.Storages.isExistentStorage(global.get_file_name_of_image_with_extension_that_exists(storage));
};

global.get_full_path_of_image = function(storage)
{
	storage += "";
	if (storage === "")
	{
		return "";
	}
	var path = global.get_file_name_of_image_with_extension_that_exists(storage);
	if (path === void)
	{
		return "";
	}
	return global.Storages.getPlacedPath(path);
};

global.Storages.isExistentImage = function(storage)
{
	return global.check_if_image_exists(storage);
};

global.isExistentImage = function(storage)
{
	return global.check_if_image_exists(storage);
};

global.getExistImageName = function(storage)
{
	return global.get_full_path_of_image(storage);
};

global.System.touchImages_patch_layer_original = global.System.touchImages;
global.System.touchImages = function(storage, limitbytes=0, timeout=0)
{
	var storage_fixed = [];
	for (var i = 0, internal_forloop_count = storage.count; i < internal_forloop_count; i += 1)
	{
		var file_name = global.get_full_path_of_image(storage[i]);
		if (file_name !== "")
		{
			storage_fixed.push(file_name);
		}
	}
	return global.System.touchImages_patch_layer_original(storage_fixed, limitbytes, timeout);
};

global.layer_tagdata_replacement = %[];
global.layer_alternate_filename = %[];

@if(GAME_WOHN)
{
	var tagdata_replacement_filename = "patch_wohn_image_tagdata.ksc";
	var alternate_filename_filename = "patch_wohn_image_alternate_filename.ksc";
	if (global.Storages.isExistentStorage(tagdata_replacement_filename))
	{
		global.layer_tagdata_replacement = global.Scripts.evalStorage(tagdata_replacement_filename);
	}
	if (global.Storages.isExistentStorage(alternate_filename_filename))
	{
		global.layer_alternate_filename = global.Scripts.evalStorage(alternate_filename_filename);
	}
}
@endif

// Layer 类覆盖
global.Layer_patch_layer_original	= global.Layer;
class Layer_patch_layer_override extends global.Layer_patch_layer_original
{
	var _font = void;
	var fontWrapper = void;

	property font
	{
		getter
		{
			return this.fontWrapper;
		}
	}

	function Layer_patch_layer_override()
	{
		super.Layer(...);
		// Can set default font here.
		this._font = super.font;
		this.fontWrapper = new global.FontWrapper(super.font, this);
	}

	// 覆盖Layer
	function Layer()
	{
		this.Layer_patch_layer_override(...);
	}

	property isPrimary
	{
		getter()
		{
			return this === this.window.primaryLayer || (typeof(this.window.fore) === "Object" && this === this.window.fore.base);
		}
	}

	var large_image_warning = false;

	function resize(w, h)
	{
		if (w > 65535 || w < 0 || h > 65535 || h < 0)
		{
			if (!this.large_image_warning)
			{
				this.large_image_warning = true;
				global.dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
				var trace_string = global.Scripts.getTraceString();
				if (trace_string !== "")
				{
					global.dm("Trace: " + trace_string);
				}
			}
			return 0;
		}
		return super.resize(...);
	}

	function setImageSize(w, h)
	{
		if (w > 65535 || w <= 0 || h > 65535 || h <= 0)
		{
			if (!this.large_image_warning)
			{
				this.large_image_warning = true;
				global.dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
				var trace_string = global.Scripts.getTraceString();
				if (trace_string !== "")
				{
					global.dm("Trace: " + trace_string);
				}
			}
			return 0;
		}
		return super.setImageSize(...);
	}

	function setSize(w, h)
	{
		if (w > 65535 || w < 0 || h > 65535 || h < 0)
		{
			if (!this.large_image_warning)
			{
				this.large_image_warning = true;
				global.dm(("warning: Large resize attempt; w is %s and h is %s").sprintf(w, h));
				var trace_string = global.Scripts.getTraceString();
				if (trace_string !== "")
				{
					global.dm("Trace: " + trace_string);
				}
			}
			return 0;
		}
		return super.setSize(...);
	}

	function loadImages(storage, key)
	{
		storage += "";
		var file_name = "";
		var alternate_filenames = global.layer_alternate_filename[global.chop_image_extension(global.Storages.extractStorageName(storage.toLowerCase()))];
		if (alternate_filenames !== void)
		{
			for (var i = 0; i < alternate_filenames.count; i += 1)
			{
				file_name = global.get_full_path_of_image(alternate_filenames[i]);
				if (file_name !== "")
				{
					break;
				}
			}
		}
		if (file_name === "")
		{
			file_name = global.get_full_path_of_image(storage);
			if (file_name === "")
			{
				throw new global.Exception(("Image \"%s\" not found%s").sprintf(storage, (alternate_filenames !== void) ? " and also checked alternate filenames" : ""));
			}
		}
		var res = super.loadImages(file_name, key);
		var replacement_tagdata = global.layer_tagdata_replacement[global.chop_image_extension(global.Storages.extractStorageName(file_name.toLowerCase()))];
		if (replacement_tagdata !== void)
		{
			if (res === null)
			{
				res = %[];
			}
			(global.Dictionary.assign incontextof res)(replacement_tagdata, false);
		}
		return res;
	}

	function saveLayerImage(storage, type)
	{
		storage = global.Storages.getFullPath(storage);
		return super.saveLayerImage(storage, type);
	}

	function drawText(left, top, text, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy)
	{
		this.font.update_font_info();
		text += "";
@if(DRAWTEXT_ESCAPE)
		var specialCharacters = this.font.fontToSpecialCharacters_specialCharacters;
		var alternativeFontFace = this.font.fontToSpecialCharacters_alternativeFontFace;
@if(!KIRIKIROID)
		if (specialCharacters != void && alternativeFontFace != void)
		{
			var x = 0;
			for (var i = 0, internal_forloop_count = text.length; i < internal_forloop_count; i += 1)
			{
				var character = text[i];
				var should_swap_font_face = false;
				if ((specialCharacters !== void && alternativeFontFace !== void) && specialCharacters.contains(character))
				{
					should_swap_font_face = true;
				}
				var previousFontFace = font.face;
				if (should_swap_font_face)
				{
					font.face = alternativeFontFace;
				}
@if(!HD_MODE)
				var textwidth = font.getTextWidth(character);
				var textheight = font.getTextHeight(character);
@endif
@if(HD_MODE)
				var textwidth = scaleWidth(font.getTextWidth(character));
				var textheight = scaleHeight(font.getTextHeight(character));
@endif
				{
					super.drawText(left + x, top, character, color, opacity, aa, slevel, scolor, swidth, sofsx, sofxy);
				}
				x += textwidth;
				if (should_swap_font_face)
				{
					font.face = previousFontFace;
				}
			}
			return;
		}
@endif
@endif
		return super.drawText(...);
	}

}
global.Layer = global.Layer_patch_layer_override;

global.Window_patch_layer_original	= global.Window;
class Window_patch_layer_override extends global.Window_patch_layer_original
{
@if(!ZOOM_WINDOW)
	var pxWidth, pxHeight;
@endif

	function Window_patch_layer_override()
	{
		super.Window(...);
	}

	function Window()
	{
		this.Window_patch_layer_override(...);
	}

	var isActive = true;

	function onActivate() {
		this.isActive = true;
	}

	function onDeactivate() {
		this.isActive = false;
	}

@if(kirikiriz)
	function onMouseMove(x, y)
	{
		if (typeof(this.fullScreened) === "Integer" && this.fullScreened)
		{
			var systemRatio = global.System.screenWidth / global.System.screenHeight;
@if(HD_MODE)
			var wideRatio = this.wideRatio;
@endif
@if(!HD_MODE)
			var wideRatio = 4/3;
@endif
			var h = systemRatio >= wideRatio? global.System.screenHeight : global.System.screenWidth*(1/wideRatio);
			var screenTop = global.Math.ceil((h-global.System.screenHeight)/2);
			
			if (y > screenTop) {
				this.menu.visible = false;
			}
			else if (y <= screenTop) {
				this.menu.visible = true;
			}
		}
		super.onMouseMove(...);
	}
@endif
}
global.Window = global.Window_patch_layer_override;
