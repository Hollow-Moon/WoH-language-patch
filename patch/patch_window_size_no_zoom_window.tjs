
global.KAGWindow_patch_window_size_no_zoom_window_original = global.KAGWindow;
class KAGWindow_patch_window_size_no_zoom_window_override extends global.KAGWindow_patch_window_size_no_zoom_window_original
{
	function KAGWindow_patch_window_size_no_zoom_window_override()
	{
		super.KAGWindow(...);
	}

	function KAGWindow()
	{
		this.KAGWindow_patch_window_size_no_zoom_window_override(...);
	}

	function onWindowSizeMenuItemClick(sender, w)
	{
		if (w === 0 || w === void)
		{
			return;
		}
		if (this.borderStyle === global.bsSizeable)
		{
			if (!this.fullScreen)
			{
@if(GAME_WOHN)
				this.setInnerSize(w, global.Math.round((w * 9) / 16) | 0);
@endif
@if(GAME_FATE||GAME_FHAT)
				this.setInnerSize(w, global.Math.round((w * 3) / 4) | 0);
@endif
			}
		}
	}

	function onLimitWindowSizeMenuItemClick(sender)
	{
		// Stub
	}

@if(GAME_WOHN)
	var	windowWidthes	= [ 640, 800, 1024, 1280, 1440, 1600, 1920 ];
@endif
@if(GAME_FATE||GAME_FHAT)
	var	windowWidthes	= [ 200, 400, 640, 800, 1024, 1280, 1440 ];
@endif
	function updateWindowSizeChecked(size)
	{
		if (typeof(this["window"+this.windowWidthes[0]+"MenuItem"]) === "Object")
		{
			for (var i = 0, internal_forloop_count = this.windowWidthes.count; i < internal_forloop_count; i += 1)
			{
				this["window"+this.windowWidthes[i]+"MenuItem"].checked	= size == this.windowWidthes[i];
			}
		}
	}

	function onResize()
	{
		this.updateWindowSizeChecked(this.fullScreen ? 0 : this.innerWidth);
		return super.onResize(...);
	}
}
global.KAGWindow = global.KAGWindow_patch_window_size_no_zoom_window_override;
