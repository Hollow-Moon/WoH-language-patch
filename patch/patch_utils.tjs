
global.name_to_patch_basename = function(name, isFolder=global.devMode)
{
	if (isFolder)
	{
		return name.toLowerCase();
	}
	else
	{
		var prefix = "patch";
		if (name !== "" && !/^\d+$/.test(name))
		{ // Not empty and not a number
			prefix += "_";
		}

		return (prefix + name + ".xp3").toLowerCase();
	}
};

global.name_to_patch = function(name, isFolder=global.devMode, basePath=global.paths_base[0])
{
	return basePath + global.name_to_patch_basename(name, isFolder);
};

global.name_to_patch_path = function(name, isFolder=global.devMode, basePath=global.paths_base[0])
{
	var result = global.name_to_patch(name, isFolder, basePath);
	if (isFolder)
	{
		result += "/";
	}
	else
	{
		result += ">";
	}
	return result;
};

global.patchExists = function(name, isFolder=global.devMode, basePath=global.paths_base[0])
{
	var result = false;
	if (!isFolder)
	{
		result = global.paths_base_dirlist[basePath]["."].find(global.name_to_patch_basename(name, false)) !== -1;
		if (global.devMode2)
		{
			result |= global.paths_base_dirlist[basePath]["."].find(global.name_to_patch_basename(name, true) + "/") !== -1;
		}
	}
	else
	{
		result = global.paths_base_dirlist[basePath]["."].find(global.name_to_patch_basename(name, true) + "/") !== -1;
	}
	return result;
};

global.load_patches = function(patch_array, should_add_to_auto_path=true)
{
	var patches_to_add = [];
	for (var i = 0, internal_forloop_count = patch_array.count; i < internal_forloop_count; i += 1)
	{
		if (patch_array[i] === void)
		{
			continue;
		}
		var name = void;
		if (typeof(patch_array[i][0]) === "String")
		{
			name = patch_array[i][0];
		}
		// FIXME: tTJSVariant_S->vt has an invalid value which causes empty string to be returned
		if (typeof(patch_array[i][0]) === "")
		{
			continue;
		}
		if (name === void)
		{
			throw new global.Exception("Expected a string when loading patch, instead got ");
		}
		var folderName = "";
		if (typeof(patch_array[i][1]) === "String")
		{
			folderName = patch_array[i][1];
		}
		folderName += "/" if folderName != "";
		var basePath = global.paths_base[0];
		if (typeof(patch_array[i][2]) === "String")
		{
			basePath = patch_array[i][2];
		}
		if (!global.devMode)
		{
			if (global.paths_base_dirlist[basePath]["."].find(global.name_to_patch_basename(name, false)) !== -1)
			{
				patches_to_add.add(global.name_to_patch_path(name, false, basePath) + folderName);
			}
		}
		if (global.devMode || global.devMode2)
		{
			var fpath = global.name_to_patch_path(name, true, basePath) + folderName;
			if (global.Storages.isExistentDirectory(fpath))
			{
				patches_to_add.add(fpath);
			}
		}
	}
	for (var i = 0, internal_forloop_count = patches_to_add.count; i < internal_forloop_count; i += 1)
	{
		if (should_add_to_auto_path)
		{
			global.Storages.removeAutoPath(patches_to_add[i]);
			global.Storages.removeAutoPath(global.translate_archive_path(patches_to_add[i], false));
			global.Storages.addAutoPath(global.translate_archive_path(patches_to_add[i]));
		}
	}
	return patches_to_add;
};

global.unload_patches = function(patch_array)
{
	var patches_to_remove = [];
	for (var i = 0, internal_forloop_count = patch_array.count; i < internal_forloop_count; i += 1)
	{
		if (patch_array[i] === void)
		{
			continue;
		}
		var name = void;
		if (typeof(patch_array[i][0]) === "String")
		{
			name = patch_array[i][0];
		}
		if (name === void)
		{
			global.Debug.message("Warning: Expected a string when unloading patch");
			continue;
		}
		var folderName = "";
		if (typeof(patch_array[i][1]) === "String")
		{
			folderName = patch_array[i][1];
		}
		folderName += "/" if folderName != "";
		var basePath = global.paths_base[0];
		if (typeof(patch_array[i][2]) === "String")
		{
			basePath = patch_array[i][2];
		}
		patches_to_remove.add(global.name_to_patch_path(name, false, basePath) + folderName);
		patches_to_remove.add(global.name_to_patch_path(name, true, basePath) + folderName);
	}
	for (var i = 0, internal_forloop_count = patches_to_remove.count; i < internal_forloop_count; i += 1)
	{
		global.Storages.removeAutoPath(patches_to_remove[i]);
		global.Storages.removeAutoPath(global.translate_archive_path(patches_to_remove[i], false));
	}
};

global.getAnchorValue = function(anchor)
{
	var anchorValue = 0;
	if (anchor == "right") {
		anchorValue = 1;
	} else if (anchor == "center") {
		anchorValue = 0.5;
	} else if (("" + (+anchor)) == anchor) {
		anchorValue = +anchor;
	}
	return anchorValue;
};

global.Array.contains = function(item) {
	return this.find(item) != -1;
};

global.lastIndexOf = function(obj, str)
{
	var pos = global.reverseStr(str).indexOf(obj);
	if(pos)
		return str.length - pos - 1;
	else
		return -1;
};

// FHA's exe doesn't have string.reverse
global.reverseStr = function(str)
{
// TODO should also use this method in RN exe.
@if(kirikiriz)
	return str.reverse();
@endif
@if(!kirikiriz)
	var result = "";
	for (var i = str.length - 1; i >= 0; i -= 1) {
		result += str[i];
	}
	return result;
@endif
};

global.startsWith = function(obj, str)
{
	return str.substr(0, obj.length) === obj;
};

global.endsWith = function(obj, str)
{
	return str.substr(str.length - obj.length, obj.length) === obj;
};

global.capitalize = function(str)
{
	return str.substr(0, 1).toUpperCase() + str.substr(1);
};

global.addMaskOverlay = function(layer, name, l=0, t=0, add=true, horizontalAlignment=void)
{
	var overlay = new global.Layer(layer.window, layer);
	{
		var o = overlay;
		if (horizontalAlignment !== void) {
			o.horizontalAlignment = horizontalAlignment;
		}
		if (add) {
			o.type = global.ltPsAdditive;
		}
		o.loadImages(name);
		layer.operateRect(l, t, overlay, 0, 0, o.imageWidth, o.imageHeight);
	}
	invalidate overlay;
};


global.defaultScrollbarImages =  [	//	base
	"",//"top_horizontal",
	"",//"base_horizontal",
	"",//"bottom_horizontal",
	"scroll_top_horizontal",
	"scroll_base_horizontal",
	"scroll_bottom_horizontal"
];

global.initializeScollbar = function(x, y, w, h, total, moving, top, scrimgs=global.defaultScrollbarImages)
{
	this.mini_layer = new global.FadeLayer(this.window, this);
	{
		var l = this.mini_layer;
		l.setPos(x, y);
		l.setSize(w, h);
		l.visible = true;
		l.hitThreshold = 0;
		l.opacity = 255;
		l.focusable = true;
		l.onMouseDown = function() {
			this.parent.onMouseDown(...);
		} incontextof this.mini_layer;
		l.onButtonDown = function() {
			this.parent.onButtonDown(...);
		} incontextof this.mini_layer;
		l.onButtonUp = function() {
			this.parent.onButtonUp(...);
		} incontextof this.mini_layer;
	}

	//6,6 margin if you use the horizontal background for the scroller
	this.scrollbar = new global.ScrollBarLayer(this.window, this.mini_layer, w, 0, 0, false, scrimgs);
	{
		var l = this.scrollbar;
		l.top = top; //use top 0 if you use the horizontal background for the scroller
		l.total		= total;
		l.area		= l.width;
		l.onscroll	= this.onScroll;
		l.current	= 0;
		l.moving	= moving;
	}

	this.window.org_onMouseWheel	= this.window.onMouseWheel;
	this.window.onMouseWheel		= this.scrollbar.onMouseWheel;
};


/// 停止所有视频图层的播放 ///
global.stopAllMovies = function(kag=global.kag)
{
	for (var i = 0, internal_forloop_count = kag.movies.count; i < internal_forloop_count; i += 1)
	{
		{
			var m = kag.movies[i];
			if(m.canWaitStop)
				m.stop();
		}
	}
};

global.isAnyMoviePlaying = function(kag=global.kag)
{
	for (var i = 0, internal_forloop_count = kag.movies.count; i < internal_forloop_count; i += 1)
	{
		{
			var m = kag.movies[i];
			if(m.canWaitStop)
				return true;
		}
	}
	return false;
};

global.fixAndLoadDictionaryForKrkr2 = function(filename, mode)
{
	var file_as_array = [];
	file_as_array.load(filename, mode);
	return global.Scripts.eval(file_as_array.join("\n").replace(/\(const\)/g, ""));
};

global.krkrzDictionaryReplace = function(matcharr)
{
	matcharr.erase(0);
	return matcharr.join("");
};

global.krkrzDictionaryRegex1 = new global.RegExp("(?:real (0x\\d\\.[A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9][A-F0-9]p-?\\d*|[-\+]?0\.0|NaN|[-\+]?Infinity)(?: /\\* (?:.*?) \\*/)?|int ([-\\+]?\\d*)|string (\".*\"))", "g");
global.krkrzDictionaryRegex2 = /(?: )(?=\%?\[\n)/g;

global.fixAndLoadDictionaryForKrkrZ = function(filename, mode)
{
	var file_as_array = [];
	file_as_array.load(filename, mode);
	var j = file_as_array.join("\n").replace(global.krkrzDictionaryRegex1, global.krkrzDictionaryReplace).replace(global.krkrzDictionaryRegex2, " (const)");
	global.Debug.message(j);
	return global.Scripts.eval(("(const)[ (const)%s ]").sprintf(j))[0];
};

// Avoid CVE-2015-5672
global.safeEvalStorage = function(filename, mode)
{
@if(!KIRIKIROID)
	if (typeof(global.Dictionary) === "Object" && typeof(global.Dictionary.loadStruct) === "Object")
	{
		var ret;
		try
		{
			ret = global.Dictionary.loadStruct(filename, mode);
		}
		catch (e)
		{
			if (e !== void && e.message.indexOf("Invalid argument") !== -1)
			{
				global.dm("Attempting to fix " + filename + " for Kirikiri Z...");
				return global.fixAndLoadDictionaryForKrkrZ(filename, mode);
			}
			throw e;
		}
		return ret;
	}
	else
@endif
	{
		var ret;
		try
		{
			ret = global.Scripts.evalStorage(filename, mode);
		}
		catch (e)
		{
			if (e !== void && e.message.indexOf("const") !== -1)
			{
				global.dm("Attempting to fix " + filename + " for Kirikiri 2...");
				return global.fixAndLoadDictionaryForKrkr2(filename, mode);
			}

			throw e;
		}
		return ret;
	}
};

global.build_exec_command_line = function(exepath, arguments, normalize_exepath=true, normalize_arguments=true)
{
	var all_args = [];
	var exe_path = exepath;
	if (normalize_exepath)
	{
		var exe_path_placed = global.Storages.getPlacedPath(exe_path);
		if (exe_path_placed !== "")
		{
			var exe_path_local = global.Storages.getLocalName(exe_path_placed);
			if (exe_path_local !== "")
			{
				exe_path = exe_path_local;
			}
		}
	}
	//exe_path = ('"%s"').sprintf(exe_path);
	for (var i = 0, internal_forloop_count = arguments.count; i < internal_forloop_count; i += 1)
	{
		var arg_path = arguments[i];
		if (normalize_arguments)
		{
			if (typeof(arg_path) === "String")
			{
				var arg_path_placed = global.Storages.getPlacedPath(arg_path);
				if (arg_path_placed !== "")
				{
					var arg_path_local = global.Storages.getLocalName(arg_path_placed);
					if (arg_path_local !== "")
					{
						arg_path = arg_path_local;
					}
				}
			}
			else if (typeof(arg_path) === "Object")
			{
				var arg_components = [];
				for (var i = 0, internal_forloop_count = arg_path.count; i < internal_forloop_count; i += 1)
				{
					var arg_component = arg_path[i];
					var arg_path_placed = global.Storages.getPlacedPath(arg_component);
					if (arg_path_placed !== "")
					{
						var arg_path_local = global.Storages.getLocalName(arg_path_placed);
						if (arg_path_local !== "")
						{
							arg_component = arg_path_local;
						}
					}
					arg_components.add(arg_component);
				}
				arg_path = arg_components.join("");
			}
		}
		else
		{
			if (typeof(arg_path) === "Object")
			{
				arg_path = arg_path.join("");
			}
		}
		all_args.add(arg_path);
	}
	var args_joined = "";
	if (all_args.count === 1)
	{
		args_joined = ('"%s"').sprintf(all_args[0]);
	}
	else if (all_args.count > 1)
	{
		args_joined = ('"%s"').sprintf(all_args.join('" "'));
	}
	return global.System.shellExecute(exe_path, args_joined);
};

global.showAboutKirikiriWindow = function()
{
	if (typeof(global.System.showVersion) === 'Object')
	{
		global.System.showVersion();
	}
	else
	{
		return global.build_exec_command_line(global.System.exeName, ["-about"]);
	}
};

global.showEngineConfigureDialog = function()
{
	return global.build_exec_command_line(global.System.exeName, ["-userconf"]);
};

global.showURLUsingDefaultHandler = function(url)
{
	return global.build_exec_command_line(url, [], false, false);
};

if (typeof(global.System.clearGraphicCache) !== "Object")
{
	global.System.clearGraphicCache = function() {
		var ccl = global.System.graphicCacheLimit;
		global.System.graphicCacheLimit = 0;
		global.System.graphicCacheLimit = ccl;
	};
}

global.check_app_lock = function()
{
	if (!global.System.createAppLock(global.System.exePath.replace(/[^A-Za-z]/g, '_')))
	{
		global.System.inform(global.__t("%sはすでに起動しています").sprintf(global.System.title));
		global.System.exit();
	}
};

@if(GAME_FATE)
global.prologue_storage_arr = [
	"プロローグ.ks",
	"プロローグ1日目.ks",
	"プロローグ2日目.ks",
	"プロローグ3日目.ks",
];
@endif

global.open_scenario_using_scenario_tracker = function(kag=global.kag, scenario, flowchart_id, flowchart_name=void)
{
@if(GAME_WOHN)
	if (typeof(kag.conductor) !== "Object")
	{
		throw new Exception("Conductor not found!");
	}
	kag.process("call.ks", "*resetall", false, true, true);
	if (tracer_object.chart_storage !== "main.gc")
	{
		tracer_object.load(tracer_object.chart_storage = "main.gc");
	}
	if (flowchart_id === void)
	{
		var block = tracer_object.getBlockFromScript(scenario);
		if (block === void)
		{
			throw new Exception("Couldn't find reference to script " + scenario + " in chart!");
		}
		global.tracer_object.start(block.id, false);
	}
	else
	{
		global.tracer_object.start(flowchart_id, false);
	}
	
	var save_scene_2nd_skip = cf.scene2ndSkip;
	cf.scene2ndSkip = false;
	tracer_object.exec();
	cf.scene2ndSkip = save_scene_2nd_skip;
	if (typeof(scenario) === "String")
	{
		var scripts = global.tracer_object.scripts;
		if (scripts === void)
		{
			throw new Exception("No scripts in block!");
		}
		var script_index = scripts.find(scenario);
		if (script_index === -1)
		{
			throw new Exception("Could not find specified script in block!");
		}
		global.tracer_object.scriptNo = script_index;
	}
	else
	{
		global.tracer_object.scriptNo = 0;
	}
	global.kag.conductor.clearCallStack();
	kag.process("tracerplugin.ks", "*play2");
@endif
@if(GAME_FATE||GAME_FHAT)
	kag.askOnClose = true;
	kag.setHistoryOptions(%[enabled:true]);
	flowchart_id |= 0;
@if(GAME_FATE)
	if (scenario === "タイトル.ks" || scenario === "体験版ダイジェスト仮組04.ks" || scenario === "ラストエピソード.ks" || scenario === "tiger_dojo_joke.ks" || scenario === "セイバーエピローグ.ks" || scenario === "凛エピローグ.ks" || scenario === "凛エピローグ2.ks" || scenario === "桜エピローグ2.ks" || scenario === "桜エピローグ.ks")
	{
		global.kag.setConductorToMain();
		global.kag.conductor.inProcessing = false;
		global.kag.conductor.interupted = false;
		global.kag.conductor.sleep();
		global.kag.process("FlowTrackerPlugin.ks", "*cleanup", false, true, true);
		global.flow_tracker_object.isScenarioExecution = false;
		global.kag.conductor.clearCallStack();
		if (scenario === "タイトル.ks")
		{
			global.kag.process("suflags_hack.ks", "*wakame");
		}
		else if (scenario === "体験版ダイジェスト仮組04.ks")
		{
			global.kag.process("suflags_hack.ks", "*demoonly");
		}
		else if (scenario === "ラストエピソード.ks")
		{
			global.kag.process("suflags_hack.ks", "*realtanua");
		}
		else if (scenario === "tiger_dojo_joke.ks")
		{
			global.kag.process("endlist.ks", "*tiger_dojo_joke");
		}
		else if (scenario === "セイバーエピローグ.ks")
		{
			global.kag.process("endlist.ks", "*fate_true_end");
		}
		else if (scenario === "凛エピローグ.ks")
		{
			global.kag.process("endlist.ks", "*ubw_good_end");
		}
		else if (scenario === "凛エピローグ2.ks")
		{
			global.kag.process("endlist.ks", "*ubw_true_end");
		}
		else if (scenario === "桜エピローグ2.ks")
		{
			global.kag.process("endlist.ks", "*hf_normal_end");
		}
		else if (scenario === "桜エピローグ.ks")
		{
			global.kag.process("endlist.ks", "*hf_true_end");
		}
		return;
	}
@endif
	if (flowchart_name === void && scenario !== void)
	{
		var arr = global.flow_tracker_object.getIdNameFromScenario(scenario);
		flowchart_name = arr[1];
		flowchart_id = arr[0];
	}
	if (flowchart_name === void)
	{
		throw new Exception("Could not find flowchart name from scenario " + scenario);
	}
	global.flow_tracker_object.init(flowchart_name, flowchart_id);
	if (typeof(global.flow_tracker_object.flow) === "Object" && scenario !== void)
	{
		var flow = global.flow_tracker_object.flow;
@if(GAME_FHAT)
		var flowchart = void;
		if (typeof(global.flow_tracker_object.flowchart) === "Object")
		{
			flowchart = global.flow_tracker_object.flowchart;
		}
@endif
		var new_id = 0;
		for (var i = 0, internal_forloop_count = flow.count; i < internal_forloop_count; i += 1)
		{
			if (typeof(flow[i]) !== "Object")
			{
				continue;
			}
			if (typeof(flow[i].type) !== "String")
			{
				continue;
			}
			var t = flow[i].type;
			if (t === "SCENE" || t === "SELECTER")
			{
				var file = void;
@if(GAME_FHAT)
				if (flowchart !== void)
				{
					file = flowchart.getScriptFilename(i);
				}
@endif
@if(GAME_FATE)
				if (typeof(global.flow_tracker_object.flowfile) === "String")
				{
					file = global.flow_tracker_object.getScenarioFileNameFromFcf(global.flow_tracker_object.flowfile, i);
				}
@endif
				if (scenario === file)
				{
					new_id = i;
					break;
				}
			}
		}
		if (new_id !== 0)
		{
			global.flow_tracker_object.init(flowchart_name, new_id);
		}
	}
	if (!global.flow_tracker_object.isPlayOK())
	{
		throw new Exception("Flowchart passed in is invalid");
	}
@if(GAME_FATE)
	global.setSystemMode("scenario");
	if (kag.flags.layer_image === void)
	{
		kag.flags.layer_image = %[];
	}
	kag.flags.layer_image.base = "";
	kag.enabledAutoMode = true;
@endif
	kag.process("flowtrackerplugin.ks", "*moveToAnotherScene");
@endif
};

global.initial_scenario_load_ready = function()
{
@if(GAME_FHAT)
	if (global.System.getArgument("-loadticketatindex") !== void)
	{
		global.kag.askOnClose = true;
		global.loadTicketFile(global.System.getArgument("-loadticketatindex") | 0);
		(global.initializeTicketFlagsMenu incontextof global.kag)();
		if (global.System.getArgument("-loadsaveatindex") === void)
		{
			global.kag.setConductorToMain();
			global.kag.conductor.inProcessing = false;
			global.kag.conductor.interupted = false;
			global.kag.conductor.sleep();
			global.kag.process("title.ks", "*prepare", false, true, true);
			global.kag.process("title.ks", "*pretitle");
		}
	}
@endif
@if(GAME_FATE||GAME_FHAT)
	if (global.System.getArgument("-testmode") !== void)
	{
		global.testmode = true;
	}
@endif
	if (global.System.getArgument("-loadsaveatindex") !== void)
	{
		global.kag.askOnClose = true;
		global.kag.loadBookMark(global.System.getArgument("-loadsaveatindex") | 0);
	}
@if(GAME_WOHN)
	else if (global.System.getArgument("-archiveopenscenario") !== void)
	{
		global.startArchiveWithScenario(global.System.getArgument("-archiveopenscenario"));
	}
@endif
	else if (global.System.getArgument("-flowchartopen") !== void || global.System.getArgument("-flowchartopenbyscenario") !== void)
	{
@if(GAME_FATE&&WIDE_MODE)
	if (global.System.getArgument("-flowchartopenbyscenario") !== void) {
		// Restore scrollYOffset that a scenes would inherit from the preceding scene during regular play.
		// When a scene can be reached via multiple scenes with different final scroll states, the value closest to 75 was chosen.
		var sceneInitScrollTargets = global.loadDictionaryIfExists("scene_init_scroll_targets.dic");
		if (sceneInitScrollTargets !== void) {
			var scrollTarget = sceneInitScrollTargets[global.System.getArgument("-flowchartopenbyscenario")];
			if (scrollTarget !== void) {
					global.kag.updateScrollPosition(,scrollTarget);
				}
			}
		}
@endif
		global.open_scenario_using_scenario_tracker(global.kag, global.System.getArgument("-flowchartopenbyscenario"), global.System.getArgument("-flowchartopenbyid"), global.System.getArgument("-flowchartopen"));
	}
	if (global.System.getArgument("-fullscreen") !== void)
	{
		var should_fullscreen = global.System.getArgument("-fullscreen") === "true";
		if (should_fullscreen)
		{
			global.kag.onFullScreenMenuItemClick();
		}
		else
		{
			global.kag.onWindowedMenuItemClick();
		}
	}
	else if (typeof(global.kag.scflags.fullScreen) === "Integer")
	{
		var should_fullscreen = global.kag.scflags.fullScreen;
		if (should_fullscreen)
		{
			global.kag.onFullScreenMenuItemClick();
		}
		else
		{
			global.kag.onWindowedMenuItemClick();
		}
	}
	if (global.System.getArgument("-innersizewidth") !== void)
	{
		if (typeof(global.kag.onWindowSizeMenuItemClick) === "Object")
		{
			global.kag.onWindowSizeMenuItemClick(void, global.System.getArgument("-innersizewidth") | 0);
		}
	}
	else
	{
		if (typeof(global.kag.callResizeHook) === "Object")
		{
			global.kag.callResizeHook();
		}
	}
};

global.full_game_reload = function(extra_args*)
{
	var should_reload_save = true;
	if ((typeof(global.titlemenu_object) === "Object" && typeof(global.titlemenu_object.menulayer) === "Object" && global.titlemenu_object.menulayer.visible) || typeof(global.titlemenu) === "Object" || typeof(global.ticket_menu) === "Object")
	{
		should_reload_save = false;
	}
	var args_arr = [];
	if (should_reload_save)
	{
		global.kag.saveBookMark(1000, true);
		args_arr.add("-loadsaveatindex=1000");
	}
@if(GAME_FHAT)
	args_arr.add("-readencoding=Shift_JIS");
	if (typeof(global.CurrentTicketNo) === "Integer")
	{
		global.saveTicketFile();
		args_arr.add("-loadticketatindex=" + CurrentTicketNo);
	}
@endif
	args_arr.add("-fullscreen=" + (global.kag.fullScreen ? "true" : "false"));
	args_arr.add("-innersizewidth=" + global.kag.innerWidth);
	for (var i = 0, internal_forloop_count = extra_args.count; i < internal_forloop_count; i += 1)
	{
		args_arr.add(extra_args[i]);
	}
	global.kag.saveSystemVariables();
	global.build_exec_command_line(global.System.exeName, args_arr);
	// Possible savedata mutex race condition?
	if (typeof(global.kag) === "Object")
	{
		global.kag.onCloseQuery(true);
	}
	global.System.exit();
};


global.floatEquals = function(x, y, epsilon=0.0000001)
{
	return global.Math.abs(x - y) < epsilon;
};

// https://stackoverflow.com/a/54137634
global.binary_to_decimal = function(arr)
{
	var decimal = 0;
	var bits = 1;
	for (var i = 0, internal_forloop_count = arr.count; i < internal_forloop_count; i += 1)
	{
		var current_number = (arr[arr.count - i - 1]);
		if (current_number === 1)
		{
			decimal += bits;
		}
		bits *= 2;
	}
	return decimal;
};

// Based on https://gist.github.com/Manouchehri/f4b41c8272db2d6423fa987e844dd9ac
// with modifications to make the output closer to that of TJSRealToHexString
global.real_to_hex_string = function(v)
{
	var ebits = 11;
	var fbits = 52;

	var s, e, f;
	// NaN doesn't equal itself
	if (v !== v)
	{
		return "NaN";
	}
	else if (v === Infinity)
	{
		return "Infinity";
	}
	else if (v === -Infinity)
	{
		return "-Infinity";
	}
	else if (v === 0)
	{
		if (1 / v === -Infinity)
		{
			return "-0.0";
		}
		else
		{
			return "0.0";
		}
	}
	else
	{
		var bias = (1 << (ebits - 1)) - 1;
		s = v < 0;
		v = global.Math.abs(v);

		if (v >= global.Math.pow(2, 1 - bias))
		{
			var ln = global.Math.min(global.Math.floor(global.Math.log(v) / global.Math.LN2), bias);
			e = ln + bias;
			f = v * global.Math.pow(2, fbits - ln) - global.Math.pow(2, fbits);
		}
		else
		{
			e = 0;
			f = v / global.Math.pow(2, 1 - bias - fbits);
		}
	}

	// Pack sign, exponent, fraction
	var fbits_arr = [];
	for (var i = fbits; i !== 0; i -= 1)
	{
		fbits_arr.insert(0, f % 2 ? 1 : 0);
		f = global.Math.floor(f / 2);
	}
	var ebits_arr = [];
	for (var i = ebits; i !== 0; i -= 1)
	{
		ebits_arr.insert(0, e % 2 ? 1 : 0);
		e = global.Math.floor(e / 2);
	}

	// Bits to bytes
	return ("%s0x1.%013Xp%d").sprintf(s ? "-" : "", global.binary_to_decimal(fbits_arr), global.binary_to_decimal(ebits_arr) - 1023);
};

global.number_to_hex_string = function(v)
{
	if (typeof(v) === "Integer")
	{
		return ("0x%016x").sprintf(v);
	}
	else if (typeof(v) === "Real")
	{
		return global.real_to_hex_string(v);
	}
	throw new global.Exception("Invalid type");
};

global.reload_messagelayer_config = function(window=global.kag)
{
	var ignore_changes_tmp = false;
	if (typeof(window.ignore_font_changes) === "Integer" && window.ignore_font_changes)
	{
		ignore_changes_tmp = true;
		window.ignore_font_changes = false;
	}
	var old_current = window.currentNum;
	var old_chr_count = window.fore.layers.count;
	var old_msg_count = window.fore.messages.count;
	window.allocateCharacterLayers(0);
	window.allocateMessageLayers(0);
	window.allocateCharacterLayers(old_chr_count);
	window.allocateMessageLayers(old_msg_count);
	window.current = (window.currentPage?window.back:window.fore).messages[old_current];
	if (ignore_changes_tmp)
	{
		window.ignore_font_changes = true;
	}
@if(GAME_WOHN)
	for (var i = 0; i < old_msg_count; i += 1)
	{
		window.fore.messages[i].appearType = "opaque";
		window.fore.messages[i].appearTimeRate = 3;
	}
@endif
};

{
	if (global.System.getArgument("-systeminformgoestolog") !== void)
	{
		global.System.inform = function(arg)
		{
			global.Debug.message(arg);
		};
	}
}

global.parse_iso8601 = function(str)
{
	// https://www.myintervals.com/blog/2009/05/20/iso-8601-date-validation-that-doesnt-suck/
	var re = new global.RegExp("^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$");
	var match = re.match(str);
	if (match.count > 0)
	{
		var date_offset = new global.Date(1970, 0, 1, 0, 0, 0);
		var date_offset_seconds_total = date_offset.getTime() \ 1000;
		var date_offset_seconds =  (date_offset_seconds_total % 60);
		var date_offset_minutes =  (date_offset_seconds_total \ 60) % 60;
		var date_offset_hours   = ((date_offset_seconds_total \ 60) \ 60) % 60;
		var year = match[1] | 0;
		var month = (match[5] | 0) - 1;
		var day = match[7] | 0;
		var hour = (match[15] | 0) - date_offset_hours;
		var minute = (("" + match[16]).substr(1,3) | 0) - date_offset_minutes;
		var second = (("" + match[19]).substr(1,3) | 0) - date_offset_seconds;
		return new global.Date(year, month, day, hour, minute, second);
	}
};

global.open_savedata_dir = function(kag=global.kag)
{
	var dir = kag.saveDataLocation;
	if (typeof(dir) === "String" && dir !== "")
	{
		var localpath = global.Storages.getLocalName(dir);
		if (localpath !== "")
		{
			global.System.shellExecute(("\"%s\"").sprintf(localpath));
		}
	}
};

global.open_current_script_file = function(kag=global.kag, vsCode=false)
{
	if (kag !== void && kag.conductor !== void && kag.conductor.curStorage != void)
	{
		if (vsCode) {
			var line = kag.conductor.curLine != void? kag.conductor.curLine - 1 : 1;
			var column = 1;
			global.System.shellExecute("code", "--goto \"%s:%s:%s\"".sprintf(Storages.getLocalName(Storages.getPlacedPath(kag.conductor.curStorage)), line, column));
		} else {
			global.System.shellExecute("\"%s\"".sprintf(Storages.getLocalName(Storages.getPlacedPath(kag.conductor.curStorage))));
		}
	}
};

global.struct_is_equal = function(s1, s2)
{
	if (s1 === s2)
	{
		return true;
	}
	else if (s1 instanceof "Array" && s2 instanceof "Array" && s1.count == s2.count)
	{
		for (var i = 0, internal_forloop_count = s1.count; i < internal_forloop_count; i += 1)
		{
			var s1item = s1[i];
			var s2item = s2[i];
			if(s1item instanceof "Array" || s1item instanceof "Dictionary")
			{
				if (!global.struct_is_equal(s1item, s2item))
				{
					return false;
				}
			}
			else if (s1item !== s2item)
			{
				return false;
			}
		}
	}
	else if (s1 instanceof "Dictionary" && s2 instanceof "Dictionary")
	{
		var key1 = [];
		var key2 = [];
		key1.assign(s1);
		key2.assign(s2);
		if (key1.count !== key2.count)
		{
			return false;
		}
		for (var i = 0, internal_forloop_count = key1.count; i < internal_forloop_count; i += 2)
		{
			var key = key1[i];
			var s1item = s1[key];
			var s2item = s2[key];
			if (s1item instanceof "Array" || s1item instanceof "Dictionary")
			{
				if (!global.struct_is_equal(s1item, s2item))
				{
					return false;
				}
			}
			else if (s1item !== s2item)
			{
				return false;
			}
		}
	}
	else
	{
		return false;
	}
	return true;
};

// Splits a string (without any delimiters)
global.split_string = function(s)
{
	var split_func = function(matcharr)
	{
		this.add(matcharr[0]);
	};
	var arr = [];
	s.replace(/(?s)./g, (split_func incontextof arr));
	return arr;
};

// Equivalent to JS Array.prototype.slice
global.slice_array = function(in_arr, begin, end)
{
	var arr = [];
	for (var i = begin; i < end; i += 1)
	{
		arr.add(in_arr[i]);
	}
	return arr;
};


global.from_codepoint_array = function(arr)
{
	for (var i = 0; i < arr.count; i += 1)
	{
		arr[i] = $arr[i];
	}
};

global.to_codepoint_array = function(arr)
{
	for (var i = 0; i < arr.count; i += 1)
	{
		arr[i] = #arr[i];
	}
};

global.arabic_presentation_initial = [
	0xFE8B,
	0xFE91,
	0xFE97,
	0xFE9B,
	0xFE9F,
	0xFEA3,
	0xFEA7,
	0xFEB3,
	0xFEB7,
	0xFEBB,
	0xFEBF,
	0xFEC3,
	0xFEC7,
	0xFECB,
	0xFECF,
	0xFED3,
	0xFED7,
	0xFEDB,
	0xFEDF,
	0xFEE3,
	0xFEE7,
	0xFEEB,
	0xFEF3
];

global.arabic_presentation_medial = [
	0xFE71,
	0xFE77,
	0xFE79,
	0xFE7B,
	0xFE7D,
	0xFE7F,
	0xFE8C,
	0xFE92,
	0xFE98,
	0xFE9C,
	0xFEA0,
	0xFEA4,
	0xFEA8,
	0xFEB4,
	0xFEB8,
	0xFEBC,
	0xFEC0,
	0xFEC4,
	0xFEC8,
	0xFECC,
	0xFED0,
	0xFED4,
	0xFED8,
	0xFEDC,
	0xFEE0,
	0xFEE4,
	0xFEE8,
	0xFEEC,
	0xFEF4
];

global.arabic_presentation_final = [
	0xFE82,
	0xFE84,
	0xFE86,
	0xFE88,
	0xFE8A,
	0xFE8E,
	0xFE90,
	0xFE94,
	0xFE96,
	0xFE9A,
	0xFE9E,
	0xFEA2,
	0xFEA6,
	0xFEAA,
	0xFEAC,
	0xFEAE,
	0xFEB0,
	0xFEB2,
	0xFEB6,
	0xFEBA,
	0xFEBE,
	0xFEC2,
	0xFEC6,
	0xFECA,
	0xFECE,
	0xFED2,
	0xFED6,
	0xFEDA,
	0xFEDE,
	0xFEE2,
	0xFEE6,
	0xFEEA,
	0xFEEE,
	0xFEF0,
	0xFEF2,
	0xFEF6,
	0xFEF8,
	0xFEFA,
	0xFEFC
];

global.arabic_presentation_isolated = [
	0xFE70,
	0xFE72,
	0xFE74,
	0xFE76,
	0xFE78,
	0xFE7A,
	0xFE7C,
	0xFE7E,
	0xFE80,
	0xFE81,
	0xFE83,
	0xFE85,
	0xFE87,
	0xFE89,
	0xFE8D,
	0xFE8F,
	0xFE93,
	0xFE95,
	0xFE99,
	0xFE9D,
	0xFEA1,
	0xFEA5,
	0xFEA9,
	0xFEAB,
	0xFEAD,
	0xFEAF,
	0xFEB1,
	0xFEB5,
	0xFEB9,
	0xFEBD,
	0xFEC1,
	0xFEC5,
	0xFEC9,
	0xFECD,
	0xFED1,
	0xFED5,
	0xFED9,
	0xFEDD,
	0xFEE1,
	0xFEE5,
	0xFEE9,
	0xFEED,
	0xFEEF,
	0xFEF1,
	0xFEF5,
	0xFEF7,
	0xFEF9,
	0xFEFB
];

// Workaround for Tashkil because FreeType doesn't render the variants in Presentation Block B properly
global.arabic_presentation_tashkil_remap_dic = %[
	"\xFE70" => "\x064B", // ARABIC FATHATAN ISOLATED FORM
	"\xFE71" => "\x0640\x064B", // ARABIC TATWEEL WITH FATHATAN ABOVE
	"\xFE72" => "\x064C", // ARABIC DAMMATAN ISOLATED FORM
	"\xFE74" => "\x064D", // ARABIC KASRATAN ISOLATED FORM
	"\xFE76" => "\x064E", // ARABIC FATHA ISOLATED FORM
	"\xFE77" => "\x064E", // ARABIC FATHA MEDIAL FORM
	"\xFE78" => "\x064F", // ARABIC DAMMA ISOLATED FORM
	"\xFE79" => "\x064F", // ARABIC DAMMA MEDIAL FORM
	"\xFE7A" => "\x0650", // ARABIC KASRA ISOLATED FORM
	"\xFE7B" => "\x0650", // ARABIC KASRA MEDIAL FORM
	"\xFE7C" => "\x0651", // ARABIC SHADDA ISOLATED FORM
	"\xFE7D" => "\x0651", // ARABIC SHADDA MEDIAL FORM
	"\xFE7E" => "\x0652", // ARABIC SUKUN ISOLATED FORM
	"\xFE7F" => "\x0652", // ARABIC SUKUN MEDIAL FORM
];

global.arabic_presentation_tashkil_remap_array_temp = [];
global.arabic_presentation_tashkil_remap = function(text)
{
	text += "";
	if (text.length == 0)
	{
		return "";
	}
	var out_split_text = global.arabic_presentation_tashkil_remap_array_temp;
	out_split_text.clear();
	for (var i = 0; i < text.length; i += 1)
	{
		var repl = global.arabic_presentation_tashkil_remap_dic[text[i]];
		if (repl !== void)
		{
			out_split_text.add(repl);
		}
		else
		{
			out_split_text.add(text[i]);
		}
	}
	var res = out_split_text.join("");
	out_split_text.clear();
	return res;
};

global.internal_break_by_linkage_arabic_temp = [];
global.internal_break_by_linkage_arabic = function(in_split_text, out_split_text)
{
	var cur_state = "";
	var res = global.internal_break_by_linkage_arabic_temp;
	res.clear();
	for (var i = 0; i < in_split_text.length; i += 1)
	{
		var c = #(in_split_text[i]);
		var is_initial = global.arabic_presentation_initial.find(c) !== -1;
		var is_medial = global.arabic_presentation_medial.find(c) !== -1;
		var is_final = global.arabic_presentation_final.find(c) !== -1;
		var is_isolated = global.arabic_presentation_isolated.find(c) !== -1;
		if (is_initial)
		{
			if (res.count > 0)
			{
				// flush
				out_split_text.add(res.join(""));
				res.clear();
			}
			cur_state = "initial";
		}
		else if (is_medial)
		{
			if (cur_state !== "initial" && cur_state !== "medial")
			{
				if (res.count > 0)
				{
					// flush
					out_split_text.add(res.join(""));
					res.clear();
				}
			}
			cur_state = "medial";
		}
		else if (is_final)
		{
			if (cur_state === "final")
			{
				if (res.count > 0)
				{
					// flush
					out_split_text.add(res.join(""));
					res.clear();
				}
			}
			cur_state = "final";
		}
		else if (is_isolated)
		{
			if (cur_state !== "initial" && cur_state !== "medial" && cur_state !== "final")
			{
				if (res.count > 0)
				{
					// flush
					out_split_text.add(res.join(""));
					res.clear();
				}
			}
		}
		else
		{
			if (cur_state === "final")
			{
				cur_state = "";
				if (res.count > 0)
				{
					// flush
					out_split_text.add(res.join(""));
					res.clear();
				}
			}
		}
		res.add($(c));
	}
	if (res.count > 0)
	{
		// flush
		out_split_text.add(res.join(""));
		res.clear();
	}
};

global.break_by_linkage_arabic_array_temp = [];
global.break_by_linkage_arabic = function(text)
{
	text += "";
	var out_split_text = global.break_by_linkage_arabic_array_temp;
	out_split_text.clear();
	if (text.length == 0)
	{
		return out_split_text;
	}
	global.internal_break_by_linkage_arabic(text, out_split_text);
	return out_split_text;
};


global.dmt = function(args*)
{
	global.Debug.message(args.join(", ")+": "+global.Scripts.getTraceString());
};
@if(DEBUG==1)
global._dm = global.Debug.message;
@endif
@if(DEBUG!=1)
global._dm = function() {};
@endif

//	krkr 2.25 beta 8 より前のexeには"imageTagLayerType"が存在しないので、仮に定義する
if (typeof(global.imageTagLayerType) === "undefined")
{
	global.imageTagLayerType	= %[
		opaque:		%[type:global.ltOpaque],
		rect:		%[type:global.ltOpaque],
		addalpha:	%[type:global.ltAddAlpha],
		add:		%[type:global.ltAdditive],
		sub:		%[type:global.ltSubtractive],
		mul:		%[type:global.ltMultiplicative],
		dodge:		%[type:global.ltDodge],
		darken:		%[type:global.ltDarken],
		lighten:	%[type:global.ltLighten],
		screen:		%[type:global.ltScreen],
	];
}

@if(DEBUG==1)
//開発時トレース用
global.getDebugStringFromElm = function( elm, str="", maxdepth=3, depth=0 )
{
	var tmp = [];
	var ret = "";

	if( elm instanceof "Dictionary" ){
		ret = str + "%[";
		tmp.assign(elm);
		for(var i=0; i<tmp.count; i+=2 ){
			ret += (string)tmp[i] + "=>";
			if( maxdepth == depth || typeof(tmp[i+1]) !== "Object" ){
				ret += (string)tmp[i+1] + ",";
			}else{
				ret += getDebugStringFromElm(tmp[i+1], "", maxdepth, depth+1) + ",";
			}
		}
		ret += "]";
	}else if( elm instanceof "Array" ){
		ret = str;
		for(var i=0; i<elm.count; i++){
			if( maxdepth == depth || typeof(elm[i]) !== "Object" ){
				ret += (string)i + ":" + (string)elm[i] + ",";
			}else{
				ret += getDebugStringFromElm(elm[i], "(array["+i+"])", maxdepth, depth+1) + ",";
			}
//		//再帰処理で長々と出しても仕方ないので２次元配列まで
//			if( elm[i] instanceof "Array" ){
//				for(var j=0; j<elm[i].count; j++){
//					ret += "[" + (string)i + "][" + (string)j + "]=" + (string)elm[i][j] + ",";
//				}
//			}else{
//				ret += (string)i + ":" + (string)elm[i] + ",";
//			}
		}
	}

	return ret;
};
@endif
@if(DEBUG==0)
global.getDebugStringFromElm = function() { return ""; };
@endif

@if(0)
/*
	実行オプションのチェック
*/
if(typeof(global.Plugins.cxdec) !== "undefined" && typeof(global.Plugins.cxdec.embedOptions) !== "undefined")
{
	var emb = global.Plugins.cxdec.embedOptions.split("\n");
	var opt, ep, tag, val, now;
	for(var i=0; i<emb.count; i++)
	{
		if((opt = emb[i]) == "" || (ep=opt.indexOf("=")) < 0) continue;
		tag = opt.substr(0,ep);
		val = opt.substr(ep+1);
		now = global.System.getArgument("-"+tag);
		if(now != (val!))
		{
			global.System.inform(@"不正なオプションです: ${tag}");
			global.System.exit();
		}
	}
}
@endif

/*
	ClassName の獲得関数
*/
//※あとで適切な場所に移動(krkrirc 2008/04/22 log よりHALO氏の情報)
global.getClassName = function( obj )
{
	var tmp = [];
	var ret = [];
	if( typeof(obj) === "Object" ){
		ret = global.Scripts.getClassNames(obj);
		if( ret instanceof "Array" ){
			tmp.assign( ret );

			//for( var i=0; i<tmp.count; i++ )	global.dm("class: [" + i + "] = " + tmp[i]);
			if( tmp.count > 0 )
				return tmp[0];
		}
	}
	return "is not class object";
};

global.getLayerInfo = function()
{
	var	func	= function(children, indent, func)
	{
		var	text;
		for(var i=0; i<children.count; i++)
		{
			{
				var c = children[i];
				if(c.parent == global.kag.primaryLayer && c.name == "Menuitem[pool]")
					continue;
				if(children[i] instanceof "MessageCharLayer")
					continue;
				text	+= indent + (c.visible ? "■" : "□")+" "+c.name+(typeof(c.layerID) !== "undefined" ? "/"+c.layerID : "")+
					(typeof(c.storage) !== "undefined" ? " <"+global.Storages.extractStorageName(c.storage)+">" : "")+
					"["+c.type+"]"+
//					"["+(isbase ? ._effect +"/in:"+.childEffect : (typeof(._effect) !== "undefined" ? (._effect != "" ? ._effect : (typeof(.parent.childEffect) !== "undefined" ? .parent.childEffect : "")): ""))+"]"+
					" ("+c.left+", "+c.top+(typeof(c.realLeft) !== "undefined" ? "/"+c.realLeft+","+c.realTop+"/"+c.realImageLeft+","+c.realImageTop : "")+")-"+
					(typeof(c.center) !== "undefined" ? ("(C:"+c.center+", "+c.vcenter+")-") : "")+
					"("+c.width+", "+c.height+") opac="+c.opacity+
					(typeof(c.zoomx) !== "undefined" ? " zoom="+(c.zoomx == c.zoomy ? "%4.2f".sprintf(c.zoomx) : "(%4.2f, %4.2f)".sprintf(c.zoomx, c.zoomy)) : "")+
					(typeof(c.rotate) !== "undefined" ? " rot=%4.2f".sprintf(c.rotate) : "")+
					(typeof(c.afx) !== "undefined" ? " af=(%d, %d)".sprintf(c.afx, c.afy) : "")+
					(typeof(c.srcleft) !== "undefined" ? " (%4.2f, %4.2f)[%4.2f/%4.2f](%d, %d)".sprintf(c.srcleft, c.srctop, c.srczoomx, c.srcrotate, c.srcafx, c.srcafy): "")+
					(typeof(c.notuse) !== "undefined" ? " use=%d".sprintf(!c.notuse) : "")+"\r\n";
				text	+= func(c.children, indent + "  ", func);
			}
		}
		return text;
	};
	return func(global.kag.primaryLayer.children, "", func);
};
global.sharelogdir = "file://192.168.101.232/exchange/WoHエラーログ/";
global.saveLogToExchange = function()
{
	if(global.Storages.isExistentStorage(global.System.exePath+"savedata/NoSendExchange.txt"))
	{
		global.dm("saveLogToExchange処理は savedata/NoSendExchange.txt が存在するため中断しました。");
		return;
	}

	var	logfn	= "krkr.console.log";
	var	date	= new global.Date();
	var	datestr;
	{
		var d = date;
		datestr	= "%02d%02d%02d-%02d%02d%02d".sprintf(d.getYear() % 100, d.getMonth()+1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());
	}
	var	linfo	= global.getLayerInfo();
	global.dm(linfo);	//	レイヤー構成をログ
	var	savefn	= datestr+".bmp";
	var	savedir	= global.System.dataPath + "excpdata/";
	global.Storages.createDirectory(savedir) if !global.Storages.isExistentDirectory(savedir);
	global.kag.saveBookMarkToFile(savedir+savefn);	//	セーブ可能ならデータを保存する
	var	copied	= false;
	if(global.Storages.isExistentDirectory(global.sharelogdir))
	{
		global.Storages.exportFile(global.System.dataPath+logfn, global.sharelogdir+datestr+"."+logfn);
		global.Storages.exportFile(savedir+savefn, global.sharelogdir+savefn);
		copied	= true;
	}

	//	クリップボードに参照情報を書き込み、念のためテキストにも出力
	var	text;
	{
		var d = date;
		text	+= "error date: %d年%d月%d日 %02d:%02d:%02d\r\n".sprintf(d.getYear(), d.getMonth()+1, d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds());
	}
	text	+= "error log : "+datestr+"."+logfn+"\r\n";
	text	+= "save data : "+savefn+"\r\n";
	text	+= "layer info: \r\n" + linfo;
	global.Clipboard.asText	= text;
	var	lines	= [ text ];
	lines.save(global.System.dataPath+"lasterrorinfo.txt");
	var	msg	= "現在の情報をクリップボードへコピーしました。\n問題の発生を伝えるときに、この情報も渡してください。\n(念の為 savedata/lasterrorinfo.txt にも同じ情報を記録しています)";
	msg	+= "(対応するエラーログ・セーブデータも提出してください)" if !copied;
	global.System.inform(msg);
};

global.Layer.setFontFace	= function(face, height=this.font.height, bold=this.font.bold, italic=this.font.italic, strikeout=this.font.strikeout, underline=this.font.underline)
{
	var	fh	= global.Math.abs(this.font.height);
	var	nh	= global.Math.abs(height);
	fh |= 0;
	nh |= 0;
//	global.dm(name+": "+this.font.face+" !== "+face+" || "+fh+" !== "+nh+" || "+this.font.italic+" !== "+italic);
	if(this.font.face != face || fh != nh || this.font.bold != bold || this.font.italic != italic || this.font.strikeout != strikeout || this.font.underline != underline)
	{
@if(0)
		global.Layer.getFontList();
@endif
		this.font.height	= height;
		this.font.bold	= bold;
		this.font.italic	= italic;
		this.font.strikeout	= strikeout;
		this.font.underline	= underline;
		//global.dm(" this.font.face = " + this.font.face + " / face = " + face);
		this.font.face = face if face !== void && face != "";
@if(0)
		var	loaded	= loadedBitmapFonts[font.face], st;
		if(loaded !== void && (st = loaded[nh]) !== void)
		{
			st	+= fontItalicSuffix if italic;
			st	+= fontFileExt;
			if(global.Storages.isExistentStorage(st))
				font.mapPrerenderedFont(st);
//			else
//				global.dm(name+".setFontFace: "+st+" is not found.");
		}
@endif
		return true;
	}
	return false;
};

/* Based on port of strftime() by T. H. Doan (https://thdoan.github.io/strftime/)
 *
 * Day of year (%j) code based on Joe Orost's answer:
 * http://stackoverflow.com/questions/8619879/javascript-calculate-the-day-of-the-year-1-366
 *
 * Week number (%V) code based on Taco van den Broek's prototype:
 * http://techblog.procurios.nl/k/news/view/33796/14863/calculate-iso-8601-week-and-year-in-javascript.html
 */
global.strftime = function(sFormat, date)
{
	if ((typeof(date) !== "Object") || !(date instanceof "Date"))
	{
		date = new global.Date();
	}
	var nDay = date.getDay();
	var nDate = date.getDate();
	var nMonth = date.getMonth();
	var nYear = date.getYear();
	var nHour = date.getHours();
	var aDays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	var aMonths = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	var aDayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
	var isLeapYear = function(nYear)
	{
		return (nYear%4===0 && nYear%100!==0) || nYear%400===0;
	};
	var getThursday = function(date)
	{
		var nDay = date.getDay();
		var nDate = date.getDate();
		var target = new global.Date(date);
		target.setDate(nDate - ((nDay+6)%7) + 3);
		return target;
	};
	var zeroPad = function(nNum, nPad)
	{
		return (((global.Math.pow(10, nPad) | 0) + nNum) + '').substring(1);
	};
	var match_tbl = %[
		'%a' => aDays[nDay].substring(0,3),
		'%A' => aDays[nDay],
		'%b' => aMonths[nMonth].substring(0,3),
		'%B' => aMonths[nMonth],
@if(0)
		'%c' => date.toUTCString(),
@endif
		'%C' => global.Math.floor(nYear/100),
		'%d' => zeroPad(nDate, 2),
		'%e' => nDate,
@if(0)
		'%F' => date.toISOString().substring(0,10),
		'%G' => getThursday().getYear(),
		'%g' => (getThursday().getYear() + '').substring(2),
@endif
		'%H' => zeroPad(nHour, 2),
		'%I' => zeroPad((nHour+11)%12 + 1, 2),
		'%j' => zeroPad(aDayCount[nMonth] + nDate + ((nMonth>1 && isLeapYear(nYear)) ? 1 : 0), 3),
		'%k' => nHour,
		'%l' => ((nHour+11)%12 + 1),
		'%m' => zeroPad(nMonth + 1, 2),
		'%n' => nMonth + 1,
		'%M' => zeroPad(date.getMinutes(), 2),
		'%p' => ((nHour<12) ? 'AM' : 'PM'),
		'%P' => ((nHour<12) ? 'am' : 'pm'),
		'%s' => global.Math.round(date.getTime()/1000),
		'%S' => zeroPad(date.getSeconds(), 2),
		'%u' => ((nDay !== 0) ? nDay : 7),
@if(0)
		'%V' => (function() {
			var target = getThursday();
			var n1stThu = target.valueOf();
			target.setMonth(0, 1);
			var nJan1 = target.getDay();
			if (nJan1!==4) target.setMonth(0, 1 + ((4-nJan1)+7)%7);
			return zeroPad(1 + global.Math.ceil((n1stThu-target)/604800000), 2);
		})(),
@endif
		'%w' => nDay,
@if(0)
		'%x' => date.toLocaleDateString(),
		'%X' => date.toLocaleTimeString(),
@endif
		'%y' => (nYear + '').substring(2),
		'%Y' => nYear,
@if(0)
		'%z' => date.toTimeString().getTime().replace(/.+GMT([+-]\d+).+/, '$1'),
		'%Z' => date.toTimeString().replace(/.+\((.+?)\)$/, '$1'),
@endif
	];
	var fmt_regex = /%[a-z]/gi;
	var match_tbl_func = function(sMatch)
	{
		var match_tbl_data = this[sMatch[0]];
		return ((match_tbl_data !== void ? (match_tbl_data + "") : sMatch) + '');
	};
	return fmt_regex.replace(sFormat, match_tbl_func incontextof match_tbl);
};

global.escape_regexp_exp = /[-\/\\^$*+?.()|[\]{}]/g;

global.escape_regexp = function(str)
{
	return global.escape_regexp_exp.replace(str, function(mtch) { return "\\" + mtch[0]; });
};

global.split_text_by_grapheme = function(kag=global.kag, text, cb, userdata)
{
	var text_sz = 0;
	if (typeof(text) === "Object")
	{
		text_sz = text.count;
	}
	else
	{
		text_sz = text.length;
	}
	if ((typeof(text) === "String"))
	{
		var arabic_shaping_enabled = global.get_arabic_shaping_enabled(kag);
		if (arabic_shaping_enabled)
		{
			text = global.break_by_linkage_arabic(text.reverse());
			for (var i = text_sz - 1; i >= 0; i -= 1)
			{
				var text_chr = text[i];
				if (typeof(text_chr) === "String")
				{
					cb(global.arabic_presentation_tashkil_remap(text_chr.reverse()), userdata);
				}
			}
			return;
		}
		if ((text.length > 1) && (text.indexOf("―") !== -1 || text.indexOf("■") !== -1))
		{
			var text_tmp = [];
			for (var i = 0, internal_forloop_count = text_sz; i < internal_forloop_count; i += 1)
			{
				var character = text[i];
				var found_same_characters = 1;
				if (("―■").indexOf(character) !== -1)
				{
					for (var j = i + 1, internal_forloop_count = text.length; j < internal_forloop_count; j += 1)
					{
						var character2 = text[j];
						if (character2 === character)
						{
							found_same_characters += 1;
						}
						else
						{
							break;
						}
					}
				}
				if (found_same_characters > 1)
				{
					var str_joined = "";
					for (var j = 0; j < found_same_characters; j += 1)
					{
						str_joined += character;
					}
					text_tmp.add(str_joined);
					i += found_same_characters - 1;
				}
				else
				{
					text_tmp.add(character);
				}
			}
			for (var i = text_tmp.count - 1; i >= 0; i -= 1)
			{
				cb(text_tmp[i], userdata);
			}
		}
		else
		{
			var index = text.length;
			var brk;
			while ((brk = global.GraphemeBreaker.previousBreak(text, index)) > 0)
			{
				var subtext = text.substring(brk, index - brk);
				cb(subtext, userdata);
				index = brk;
			}
			{
				var subtext = text.substring(0, index);
				cb(subtext, userdata);
			}
		}
		return;
	}
	for (var i = text_sz - 1; i >= 0; i -= 1)
	{
		cb(text[i], userdata);
	}
};

global.recalcExtraMenuButtonX = function(buttonName, xPosOld, layer)
{
	var windowWideFactor = 1;
	if (["Integer", "Real"].find(typeof(layer.window.wideFactor)) !== -1)
	{
		windowWideFactor = layer.window.wideFactor;
	}
	var defaultImageWidth = %["ex_prologue" => 428, "ex_gallery" => 360, "ex_music" => 296, "ex_movie" => 308, "ex_edlist" => 352, "ex_status" => 304, "ex_weapon" => 400, "ex_scene" => 400, "ex_back" => 284, "ss_backボタン" => 300, "gl_anotherボタン" => 412];
	var imgWidthOld = defaultImageWidth[buttonName];
	var imgWidthNew = layer.imageWidth;
	
	var btnWidthOld = imgWidthOld / 4;
	var btnWidthNew = imgWidthNew / 4;
	var imgCenter = xPosOld + (btnWidthOld/2);

	var wideResWidth = int(global.originalResWidth * windowWideFactor);

	var xPosNew;
	if (buttonName == "gl_anotherボタン")
		xPosNew = xPosOld + imgCenter - (btnWidthNew/2); // Left side buttons should keep their center's distance to the left border
	else
		xPosNew = wideResWidth - global.originalResWidth + imgCenter - (btnWidthNew/2); // Right side buttons should keep their center's distance to the right border

	// Inverse discrete transform the value, so the button will really be drawn at xPosNew
	var xPosIDC = int(global.Math.round(xPosNew * (global.originalResWidth - btnWidthNew) / (wideResWidth - btnWidthNew)));

	return xPosIDC;
};

global.utf8_calculate_len = function(codepoint)
{
	if (codepoint < 0x7f)
	{
		return 1;
	}
	if (codepoint < 0x7ff)
	{
		return 2;
	}
	if (codepoint < 0xffff)
	{
		return 3;
	}
	return 4;
};
global.utf8_leading_bytes = [
	[0x80, 0x00],
	[0xE0, 0xC0],
	[0xF0, 0xE0],
	[0xF8, 0xF0],
];

global.utf8_encode_codepoint = function(codepoint)
{
	var sz = global.utf8_calculate_len(codepoint);
	var ar = [];
	for (var i = 0; i < sz - 1; i += 1)
	{
		ar.unshift((((codepoint >> (6 * i)) & (0xC0 ^ 0xFFFFFFFF)) & 0xFF) | 0x80);
	}
	var pattern = global.utf8_leading_bytes[sz - 1];
	ar.unshift((((codepoint >> (6 * (sz - 1))) & ((pattern[0]) ^ 0xFFFFFFFF)) & 0xFF) | pattern[1]);
	return ar;
};
global.utf8_encode_string = function(strval)
{
	var ar = [];
	for (var i = 0; i < strval.length; i += 1)
	{
		var arx = global.utf8_encode_codepoint(#strval[i]);
		ar.push(arx*);
	}
	return ar;
};
global.md5_SV = [
	0xd76aa478, 0xe8c7b756, 0x242070db, 0xc1bdceee,
	0xf57c0faf, 0x4787c62a, 0xa8304613, 0xfd469501,
	0x698098d8, 0x8b44f7af, 0xffff5bb1, 0x895cd7be,
	0x6b901122, 0xfd987193, 0xa679438e, 0x49b40821,
	0xf61e2562, 0xc040b340, 0x265e5a51, 0xe9b6c7aa,
	0xd62f105d, 0x02441453, 0xd8a1e681, 0xe7d3fbc8,
	0x21e1cde6, 0xc33707d6, 0xf4d50d87, 0x455a14ed,
	0xa9e3e905, 0xfcefa3f8, 0x676f02d9, 0x8d2a4c8a,
	0xfffa3942, 0x8771f681, 0x6d9d6122, 0xfde5380c,
	0xa4beea44, 0x4bdecfa9, 0xf6bb4b60, 0xbebfbc70,
	0x289b7ec6, 0xeaa127fa, 0xd4ef3085, 0x04881d05,
	0xd9d4d039, 0xe6db99e5, 0x1fa27cf8, 0xc4ac5665,
	0xf4292244, 0x432aff97, 0xab9423a7, 0xfc93a039,
	0x655b59c3, 0x8f0ccc92, 0xffeff47d, 0x85845dd1,
	0x6fa87e4f, 0xfe2ce6e0, 0xa3014314, 0x4e0811a1,
	0xf7537e82, 0xbd3af235, 0x2ad7d2bb, 0xeb86d391,
];
global.leftCircularShift = function(k, bits)
{
	bits &= 0x1f;
	k &= 0xffffffff;
	return ((k << bits) & 0xffffffff) | (k >> (32 - bits));
};
global.md5_F = function(X, Y, Z)
{
	return (X & Y) | ((X ^ 0xffffffff) & Z);
};
global.md5_G = function(X, Y, Z)
{
	return (X & Z) | (Y & (Z ^ 0xffffffff));
};
global.md5_H = function(X, Y, Z)
{
	return X ^ Y ^ Z;
};
global.md5_I = function(X, Y, Z)
{
	return Y ^ (X | (Z ^ 0xffffffff));
};
global.md5proc = function(a, b, c, d, M, s, t, f)
{
	return b + global.leftCircularShift(a + f(b, c, d) + M + t, s);
};
global.md5bitlen = function(bitstring)
{
	return bitstring.count << 3;
};
global.md5sum = function(inmsg)
{
	var md5bitlen = global.md5bitlen;
	var md5proc = global.md5proc;
	var F = global.md5_F;
	var G = global.md5_G;
	var H = global.md5_H;
	var I = global.md5_I;
	var SV = global.md5_SV;
	var msg = [];
	msg.assign(inmsg);
	var msgLen = md5bitlen(msg) & 0xFFFFFFFFFFFFFFFF;
	msg.add(0x80);
	var padlen = ((0x1c0 - (msgLen + 8)) & 0x1ff) >> 3;
	for (var i = 0; i < padlen; i += 1)
	{
		msg.add(0x00);
	}
	msg.add((msgLen >> 0) & 0xFF);
	msg.add((msgLen >> 8) & 0xFF);
	msg.add((msgLen >> 16) & 0xFF);
	msg.add((msgLen >> 24) & 0xFF);
	msg.add((msgLen >> 32) & 0xFF);
	msg.add((msgLen >> 40) & 0xFF);
	msg.add((msgLen >> 48) & 0xFF);
	msg.add((msgLen >> 56) & 0xFF);
	msgLen = md5bitlen(msg);
	var A = 0x67452301;
	var B = 0xefcdab89;
	var C = 0x98badcfe;
	var D = 0x10325476;
	var mlen = msgLen >> 9;
	for (var i = 0; i < mlen; i += 1)
	{
		var a = A;
		var b = B;
		var c = C;
		var d = D;
		var M = [];
		var xoffs = i << 6;
		for (var j = 0; j < 16; j += 1)
		{
			var yoffs = xoffs + (j << 2);
			M.add((msg[yoffs + 3] << 24) | (msg[yoffs + 2] << 16) | (msg[yoffs + 1] << 8) | (msg[yoffs + 0] << 0));
		}
		a = md5proc(a, b, c, d, M[0], 7, SV[0], F);
		d = md5proc(d, a, b, c, M[1], 12, SV[1], F);
		c = md5proc(c, d, a, b, M[2], 17, SV[2], F);
		b = md5proc(b, c, d, a, M[3], 22, SV[3], F);
		a = md5proc(a, b, c, d, M[4], 7, SV[4], F);
		d = md5proc(d, a, b, c, M[5], 12, SV[5], F);
		c = md5proc(c, d, a, b, M[6], 17, SV[6], F);
		b = md5proc(b, c, d, a, M[7], 22, SV[7], F);
		a = md5proc(a, b, c, d, M[8], 7, SV[8], F);
		d = md5proc(d, a, b, c, M[9], 12, SV[9], F);
		c = md5proc(c, d, a, b, M[10], 17, SV[10], F);
		b = md5proc(b, c, d, a, M[11], 22, SV[11], F);
		a = md5proc(a, b, c, d, M[12], 7, SV[12], F);
		d = md5proc(d, a, b, c, M[13], 12, SV[13], F);
		c = md5proc(c, d, a, b, M[14], 17, SV[14], F);
		b = md5proc(b, c, d, a, M[15], 22, SV[15], F);
		a = md5proc(a, b, c, d, M[1], 5, SV[16], G);
		d = md5proc(d, a, b, c, M[6], 9, SV[17], G);
		c = md5proc(c, d, a, b, M[11], 14, SV[18], G);
		b = md5proc(b, c, d, a, M[0], 20, SV[19], G);
		a = md5proc(a, b, c, d, M[5], 5, SV[20], G);
		d = md5proc(d, a, b, c, M[10], 9, SV[21], G);
		c = md5proc(c, d, a, b, M[15], 14, SV[22], G);
		b = md5proc(b, c, d, a, M[4], 20, SV[23], G);
		a = md5proc(a, b, c, d, M[9], 5, SV[24], G);
		d = md5proc(d, a, b, c, M[14], 9, SV[25], G);
		c = md5proc(c, d, a, b, M[3], 14, SV[26], G);
		b = md5proc(b, c, d, a, M[8], 20, SV[27], G);
		a = md5proc(a, b, c, d, M[13], 5, SV[28], G);
		d = md5proc(d, a, b, c, M[2], 9, SV[29], G);
		c = md5proc(c, d, a, b, M[7], 14, SV[30], G);
		b = md5proc(b, c, d, a, M[12], 20, SV[31], G);
		a = md5proc(a, b, c, d, M[5], 4, SV[32], H);
		d = md5proc(d, a, b, c, M[8], 11, SV[33], H);
		c = md5proc(c, d, a, b, M[11], 16, SV[34], H);
		b = md5proc(b, c, d, a, M[14], 23, SV[35], H);
		a = md5proc(a, b, c, d, M[1], 4, SV[36], H);
		d = md5proc(d, a, b, c, M[4], 11, SV[37], H);
		c = md5proc(c, d, a, b, M[7], 16, SV[38], H);
		b = md5proc(b, c, d, a, M[10], 23, SV[39], H);
		a = md5proc(a, b, c, d, M[13], 4, SV[40], H);
		d = md5proc(d, a, b, c, M[0], 11, SV[41], H);
		c = md5proc(c, d, a, b, M[3], 16, SV[42], H);
		b = md5proc(b, c, d, a, M[6], 23, SV[43], H);
		a = md5proc(a, b, c, d, M[9], 4, SV[44], H);
		d = md5proc(d, a, b, c, M[12], 11, SV[45], H);
		c = md5proc(c, d, a, b, M[15], 16, SV[46], H);
		b = md5proc(b, c, d, a, M[2], 23, SV[47], H);
		a = md5proc(a, b, c, d, M[0], 6, SV[48], I);
		d = md5proc(d, a, b, c, M[7], 10, SV[49], I);
		c = md5proc(c, d, a, b, M[14], 15, SV[50], I);
		b = md5proc(b, c, d, a, M[5], 21, SV[51], I);
		a = md5proc(a, b, c, d, M[12], 6, SV[52], I);
		d = md5proc(d, a, b, c, M[3], 10, SV[53], I);
		c = md5proc(c, d, a, b, M[10], 15, SV[54], I);
		b = md5proc(b, c, d, a, M[1], 21, SV[55], I);
		a = md5proc(a, b, c, d, M[8], 6, SV[56], I);
		d = md5proc(d, a, b, c, M[15], 10, SV[57], I);
		c = md5proc(c, d, a, b, M[6], 15, SV[58], I);
		b = md5proc(b, c, d, a, M[13], 21, SV[59], I);
		a = md5proc(a, b, c, d, M[4], 6, SV[60], I);
		d = md5proc(d, a, b, c, M[11], 10, SV[61], I);
		c = md5proc(c, d, a, b, M[2], 15, SV[62], I);
		b = md5proc(b, c, d, a, M[9], 21, SV[63], I);
		A = (A + a) & 0xFFFFFFFF;
		B = (B + b) & 0xFFFFFFFF;
		C = (C + c) & 0xFFFFFFFF;
		D = (D + d) & 0xFFFFFFFF;
	}
	var finarr = [];
	finarr.push((A >> 0) & 0xFF, (A >> 8) & 0xFF, (A >> 16) & 0xFF, (A >> 24) & 0xFF);
	finarr.push((B >> 0) & 0xFF, (B >> 8) & 0xFF, (B >> 16) & 0xFF, (B >> 24) & 0xFF);
	finarr.push((C >> 0) & 0xFF, (C >> 8) & 0xFF, (C >> 16) & 0xFF, (C >> 24) & 0xFF);
	finarr.push((D >> 0) & 0xFF, (D >> 8) & 0xFF, (D >> 16) & 0xFF, (D >> 24) & 0xFF);
	return finarr;
};
global.calc_epk_hash = function(intext)
{
	var hashbase_val = "0123456789abcdefghijklmnopqrstuvwxyz";
	var strar = global.utf8_encode_string(intext);
	var digest = global.md5sum(strar);
	var ar = [];
	for (var i = 0; i < 26; i += 1)
	{
		var noffs = (i * 5) - 2;
		var offs1r = noffs & 7;
		var offs1 = noffs >> 3;
		var offs2 = (noffs + 5) >> 3;
		var digithi = 0;
		var digitlo = 0;
		if (noffs >= 0 || offs1 >= 0)
		{
			var shhi = offs1r - 3;
			if (digest.count > offs1)
			{
				if (shhi > 0)
				{
					digithi = (digest[offs1] << shhi) & 0x1F;
				}
				else
				{
					digithi = (digest[offs1] >> -shhi) & 0x1F;
				}
			}
			if (shhi > 0 && digest.count > offs2)
			{
				digitlo = (digest[offs2] >> (8 - shhi)) & 0x1F;
			}
		}
		else
		{
			digithi = (digest[0] >> (7 + noffs)) & 0x1F;
		}
		ar.add(hashbase_val[digithi | digitlo]);
	}
	return ar.join("");
};

global.read_decrypted_epk = function(infile)
{
	var finarr = [];
	var arf = [];
	arf.load(infile);
	if (arf[0] !== "DAT")
	{
		return finarr;
	}
	if (arf[1] === void)
	{
		return finarr;
	}
	var key_strs = [];
	var key_types = [];
	var splteq = [];
	var curstr = arf[1];
	for (var i = 0; i !== void;)
	{
		var old_i = i;
		i = curstr.indexOf("::", old_i);
		if (i === -1)
		{
			i = void;
		}
		splteq.split("=", curstr.substring(old_i, i - old_i));
		key_strs.add(splteq[0]);
		key_types.add(splteq[1]);
		if (i !== void)
		{
			i += 2;
		}
	}
	for (var i = 2; i < arf.count; i += 1)
	{
		var dic = %[];
		var curstr = arf[i];
		if (curstr === "" || curstr === void)
		{
			continue;
		}
		for (var j = 0, jx = 0; j !== void; jx += 1)
		{
			var old_j = j;
			j = curstr.indexOf("::", old_j);
			if (j === -1)
			{
				j = void;
			}
			var key_str = key_strs[jx];
			if (key_str !== void && key_str !== "")
			{
				var val_prepared = curstr.substring(old_j, j - old_j);
				switch (key_types[jx])
				{
					case "qid":
					case "i":
					case "r":
						val_prepared |= 0;
						break;
					case "f":
						val_prepared += 0.0;
						break;
					case "str":
					case "lstr":
					default:
						break;
				}
				dic[key_str] = val_prepared;
			}
			if (j !== void)
			{
				j += 2;
			}
		}
		finarr.add(dic);
	}
	return finarr;
};

global.get_epk_scenario_replacements = function(scenario_path)
{
	var xpos1 = scenario_path.reverse().indexOf("/");
	var xpos = scenario_path.length - xpos1;
	if (xpos1 === -1)
	{
		xpos = 0;
	}
	var substr1 = scenario_path.substr(xpos);
	var ypos = substr1.indexOf(".");
	if (ypos === -1)
	{
		ypos = void;
	}
	var scenario_basename = substr1.substr(0, ypos);
	var epk_fn = global.calc_epk_hash(scenario_basename) + ".epk_dec";
	var replacementdic = %[];
	if (global.Storages.isExistentStorage(epk_fn))
	{
		var finarr = global.read_decrypted_epk(epk_fn);
		for (var i = 0; i < finarr.count; i += 1)
		{
			var ky = finarr[i]["label"];
			if (ky !== void && ky !== "")
			{
				replacementdic[ky] = finarr[i]["text"];
			}
		}
	}
	return replacementdic;
};
