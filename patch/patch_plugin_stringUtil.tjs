
global.isNumber_regex = /^-?[0-9]\d*(\.\d+)?$/g;
global.isNumber = function(v)
{
	if (typeof(v) !== "String")
	{
		return true;
	}
	return global.isNumber_regex.match(v).count !== 0;
};

global.initSpline = function(keys)
{
	var count = keys.count;
	var arr1 = [];
	var arr2 = [];
	arr2[0] = 0.0;
	arr2[count - 1] = 0.0;
	var prev = keys[count - 1][1];
	for (var i = count - 2; i >= 0 ; --i)
	{
		var n = keys[i][1];
		arr1[i + 1] = prev - n;
		prev = n;
	}
	var p = 1;
	arr2[1] = arr1[2] - arr1[1] - arr2[0];
	arr1[1] = 4.0;
	if ( count > 3 )
	{
		if ( count > 6 )
		{
			var n1 = 3;
			var n = ((count - 7) >> 2) + 1;
			var n2 = 5;
			p = 4 * n + 1;
			for (; n > 0; --n)
			{
				var v20 = 1.0 / arr1[n1 - 2];
				n1 += 4;
				n2 += 4;
				arr2[n1 - 5] = arr1[n1 - 4] - arr1[n1 - 5] - arr1[n1 - 6] * v20;
				var v21 = 4.0 - v20;
				arr1[n1 - 5] = v21;
				var v22 = 1.0 / v21;
				arr2[n1 - 4] = arr1[n1 - 3] - arr1[n1 - 4] - arr1[n1 - 5] * v22;
				var v23 = 4.0 - v22;
				arr1[n1 - 4] = v23;
				var v24 = 1.0 / v23;
				arr2[n2 - 5] = arr1[n1 - 2] - arr1[n1 - 3] - arr1[n1 - 4] * v24;
				var v25 = 4.0 - v24;
				arr1[n1 - 3] = v25;
				var v26 = 1.0 / v25;
				arr2[n2 - 4] = arr1[n1 - 1] - arr1[n1 - 2] - arr1[n1 - 3] * v26;
				arr1[n1 - 2] = 4.0 - v26;
			}
		}
		if ( p < count - 2 )
		{
			var n = p + 1;
			for (var i = count - 2 - p; i > 0; --i)
			{
				var v30 = 1.0 / arr1[n - 1];
				++n;
				arr2[n - 1] = arr1[n] - arr1[n - 1] - arr1[n - 2] * v30;
				arr1[n - 1] = 4.0 - v30;
			}
		}
	}
	var r = count - 2;
	arr2[r] = arr2[r] - arr2[r + 1];
	if ( r >= 4 )
	{
		var n1 = r - 3;
		var n = ((r - 4) >> 2) + 1;
		var n2 = r - 1;
		r -= 4 * n;
		for (; n > 0; --n)
		{
			var v34 = arr2[n2+1];
			n2 -= 4;
			n1 -= 4;
			var v35 = (v34 - arr2[n2+6]) / arr1[n1+7];
			arr2[n2+5] = v35;
			var v36 = (arr2[n2+4] - v35) / arr1[n2+4];
			arr2[n2+4] = v36;
			var v37 = (arr2[n2+3] - v36) / arr1[n1+5];
			arr2[n2+3] = v37;
			arr2[n2+2] = (arr2[n2+2] - v37) / arr1[n1+4];
		}
	}
	for (; r > 0; --r)
	{
		arr2[r] = (arr2[r] - arr2[r + 1]) / arr1[r];
	}
	arr2.pop();
	return arr2;
};

//	キーフレームの解析
//		"(...)(...)(...)" となっているところの"..."(要素)のみを取り出す
// XXX: This regex implementation of parseKeyFrame only supports nested 2 levels deep of parentheses
global.parseKeyFrame_regex = /\(((?:[^)(]+|\((?:[^)(]+|\([^)(]*\))*\))*)\)/g;
global.parseKeyFrame = function(keyframe)
{
	//	解析する必要がなければ、そのまま返す
	if (typeof(keyframe) === "Object" && keyframe instanceof "Array")
	{
		return keyframe;
	}

	var split_func = function(matcharr)
	{
		var split = matcharr[1].split(",");
		for (var i = split.count - 1; i >= 0; i -= 1)
		{
			var item = split[i];
			if (global.isNumber(item))
			{
				split[i] = +item;
			}
		}
		this.add(split);
		return "";
	};

	var keys = [];
	keyframe.replace(global.parseKeyFrame_regex, (split_func incontextof keys));

	if (keys.count === 0)
	{
		// Somehow we failed to parse it, try another way
		return global.parseKeyFrame_alternate(keyframe);
	}

	return keys;
};

global.parseKeyFrame_alternate = function(keyframe)
{
	//	解析する必要がなければ、そのまま返す
	if (typeof(keyframe) == "Object" && keyframe instanceof "Array")
	{
		return keyframe;
	}

//	var	keys	= keyframe.split("()",, true);	//	この方法でやると、要素部分に()が含まれているときに意図しない動作になる
	if(keyframe[0] != "(")
		throw new global.Exception("キーフレームが解析できません。: "+keyframe);
	keyframe	= keyframe.substr(1);
	var	keys	= [];
	var	pos	= keyframe.indexOf(")(");
	while(pos >= 0)
	{
		keys.add(keyframe.substr(0, pos));
		keyframe	= keyframe.substr(pos+2);
		pos	= keyframe.indexOf(")(");
	}
	if(keyframe[keyframe.length - 1] != ")")
		throw new global.Exception("キーフレームの最後が不正です: "+keyframe);
	keys.add(keyframe.substr(0, keyframe.length - 1));

	for(var i=0; i<keys.count; i++)
	{
		var	key	= keys[i], j = 0;
		var	array = keys[i] = [];
		while(1)
		{
			var	pos_c	= key.indexOf(",");
			var	pos_b	= key.indexOf("(");
			if(pos_c < 0)
			{
				array[j]	+= key;
				break;
			}
			else if(pos_b < 0 || pos_c < pos_b)
			{
				array[j]+= key.substr(0, pos_c);
				key		= key.substr(pos_c + 1);
				j++;
			}
			else
			{
				pos_b	= key.indexOf(")");
				array[j]+= key.substr(0, pos_b+1);
				key		= key.substr(pos_b + 1);
			}
		}
		keys[i][0]	= +keys[i][0];
	}
	return keys;
};
