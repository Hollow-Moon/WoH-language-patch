@if(__PATCH_INITIALIZED__==0)
@set(__PATCH_INITIALIZED__=1)

@if(GAME_FATE==0 && GAME_FHAT==0 && GAME_WOHN==0)
@set(GAME_FATE=1)
global.GameID = "FATE";
@endif

@if(GAME_FATE)
global.PatchVersion = [1, 1, 5];
global.PatchDescription = "Ultimate Patch %VERSION%";
global.PatchInfoURL = "https://ultimate-moon.github.io/fate/";
global.PatchSupportURL = "https://ultimate-moon.github.io/fate/support/";
@endif

@if(GAME_FHAT)
global.PatchVersion = [1, 0, 2];
global.PatchDescription = "Voice Patch %VERSION%";
global.PatchInfoURL = "https://ultimate-moon.github.io/fhat/";
global.PatchSupportURL = "https://ultimate-moon.github.io/fhat/support/";
@endif

@if(GAME_WOHN)
global.PatchVersion = [0, 0, 1];
global.PatchDescription = "Language Patch %VERSION%";
global.PatchInfoURL = "https://hollow-moon.github.io/wohn/";
global.PatchSupportURL = "https://hollow-moon.github.io/wohn/support/";
@endif

{
	if ((typeof(global.PatchVersion) !== "Object") || (typeof(global.PatchDescription) !== "String") || (typeof(global.PatchInfoURL) !== "String"))
	{
		throw new global.Exception("Patch was not initialized in a correct manner.");
	}
}

global.System.exceptionHandler = function(e)
{
	global.Debug.logAsError();

	if (typeof(global.kag) === "Object" && isvalid(global.kag) && typeof(global.kag.fullScreened) === "Integer" && global.kag.fullScreened && typeof(global.kag.onWindowedMenuItemClick) === "Object" && isvalid(global.kag.onWindowedMenuItemClick))
	{
		global.kag.onWindowedMenuItemClick();
	}

	var exception_message = "Unknown error";
	if (typeof(e) === "Object" && isvalid(e))
	{
		if (typeof(e.message) == "String")
		{
			exception_message = e.message;
		}
	}
	global.Debug.message("Exception: " + exception_message);
	var trace_string = global.Scripts.getTraceString();
	if (trace_string !== "")
	{
		global.Debug.message("Trace: " + trace_string);
	}
	var msg_components = [];
	msg_components.add(("Support forum thread: %s").sprintf(global.PatchInfoURL));
	var exception_information_in_clipboard = false;
@if(0)
	try
	{
		var clip_components = [];
		clip_components.add("[spoiler=Error contents]");
		clip_components.add("EXCEPTION MESSAGE [code]");
		clip_components.add(exception_message);
		clip_components.add("[/code]");
		clip_components.add("TRACE [code]");
		clip_components.add(trace_string);
		clip_components.add("[/code]");
		try
		{
			if (typeof(global.Debug) === "Object" && typeof(global.Debug.getLastLog) === "Object")
			{
				var last_log = global.Debug.getLastLog();
				clip_components.add("LAST LOG [code]");
				clip_components.add(last_log);
				clip_components.add("[/code]");
			}
		}
		catch (e)
		{
			// pass
		}
		clip_components.add("[/spoiler]");
		var clip = clip_components.join(" ");
		if (typeof(global.Clipboard) === "Object" && typeof(global.Debug.getLastLog) === "Object")
		{
			var cb = global.Clipboard;
			var at = &cb.asText;
			if (typeof(at) === "Object")
			{
				*at = clip;
				var newclipstr = *at;
				if (typeof(newclipstr) === "String" && newclipstr.length !== 0)
				{
					exception_information_in_clipboard = true;
				}
			}
		}
	}
	catch (e)
	{
		// pass
	}
@endif
	msg_components.add("");
	if (exception_information_in_clipboard)
	{
		msg_components.add("Please contact the support forum thread with the contents of your clipboard, containing information about the error, along with an explanation of when and how it occurred.");
	}
	else
	{
		msg_components.add("\"krkr.console.log\" and \"hwexcept.log\" have been created in either the game's or savedata directory.");
		msg_components.add("Please contact the support forum thread with the save data that caused the error, along with the above files and an explanation of when and how it occurred.");
		msg_components.add("");
		msg_components.add("The following script error occurred early in initialization.");
		msg_components.add("--------------------------------------------------------------------------------");
		msg_components.add(exception_message);
		msg_components.add("--------------------------------------------------------------------------------");
	}
	var msg = msg_components.join("\n");
	global.System.inform(msg);

@if(!KIRIKIROID)
	if ((typeof(global.devMode) === "Integer" ? !global.devMode : true) && (typeof(global.devMode2) === "Integer" ? !global.devMode2 : true))
	{
		if (global.System.getArgument('-openpatchinfourlonerror') !== "no" && typeof(global.PatchInfoURL) === "String")
		{
			global.System.shellExecute(global.PatchInfoURL);
		}
	}

	if (typeof(global.kag) === "Object" && isvalid(global.kag) && typeof(global.kag.visible) == "Integer" && global.kag.visible == false)
	{
		global.System.exit(127);
	}
@endif

	return true;
};

// Prevent premature exit after startup script execution but before main window is created
global.System.exitOnNoWindowStartup = false;

global.dmt = function(msg*)
{
	global.Debug.message(msg.join(", ") + ": " + global.Scripts.getTraceString());
};

// Default settings
//プラグインへのイベント配信時にエラー停止しないよう暫定的にトラップさせる=1 / させない=0
@set(__PLUGIN_EVENT_ERROR_TRAP__=0)
@set(NEWSTAFFROLLPLUGIN=1)
@set(NEWER4WINDOWMODE=1)
@set(SCENEMENU=0)
@set(ED_BUTTONS=1)
@set(BGM_SELECTION=1)
@set(FADE_BGM_WITH_VOICE=1)
@set(COMMUNE=1)
@set(MOBILE_MODE=1)
@set(HISTORY_CURRENT_PAGE=0)
@set(SAVE_FONT_TAG=0)
@set(HANAFUDA_TRACKGIRLS=1)
@set(HANAFUDA_SCENEMENU=0)
@set(HANAFUDA_STORE_FULL_VOICE_IN_HISTORY=0)
@set(SONY_ATRAC=0)
@set(LE_LOOP=1)
@set(DRAWTEXT_ESCAPE=1)
@set(USE_BYTECODE=0)
@set(SMOOTH_ANIMATIONS=1)
@set(YESNOLAYER=1)
@set(YESNOLAYER_RELATIVE_TO_CURSOR=0)
@set(FREETYPE_FONT=0)
@set(CHECK_INTERVAL=0)
@set(USE_WUFFMPEG=1)
@set(SHOW_MARGINS=0)
@set(WORDWRAP_BOLDITALIC_MODIFIER=0)
@set(RELOAD_SCENARIO_ON_FONT_CHANGE=1)
@set(USE_KRMEMPLUGIN=1)
@set(USE_MENU_LAYER=0)
@set(ASYNC_IMAGE_LOAD=0)
@set(USE_KR_VARIOUS_PLUGINS=1)
@set(NO_ASYNC_CACHE_IMAGE=1)
@set(HD_COMPATIBLE_SAVES=1)
// history buttons are unused anyway...
@set(HISTORY_BUTTONS=0)
@set(SCALE_ROUND_TOWARDS_NEAREST=0)
@set(MESSAGELAYER_USECHARLAYER=0)
@set(USE_GPU_LAYER=0)
@set(USE_KRMPV=1)
@set(USE_LOG_STORAGE_USED=0)

@if(GAME_FATE||GAME_FHAT)
@set(TEXT_DRAWER=1)
@endif

@if(__SELECT_TEXTWINDOW__!=2)
@set(FONT_MENU_OPACITY=1)
@endif

@if(!GAME_WOHN)
@set(ENABLE_LINKS=1)
@endif

@if(kirikiriz&&!GAME_WOHN)
@set(HD_MODE=1)
@endif

@if(kirikiriz||GAME_WOHN)
@set(ZOOM_WINDOW=1)
@set(ZOOM_WINDOW_ENABLE_ONRESIZE=1)
@endif

@if(GAME_WOHN)
@set(WORDWRAP_BOLDITALIC_MODIFIER=0)
@set(CACHE_CHAR_LAYERS_FROM_TEXT=1)
@set(CACHE_CHAR_LAYERS_FROM_TEXT_FIRSTLOAD_ONLY=0)
@set(FREETYPE_FONT=1)
@set(MESSAGELAYER_USECHARLAYER=1)
@set(MESSAGELAYER_ACTIONMANAGER=1)
@set(USE_KRMPV=0)
@endif

{
	if (typeof(global.KirikiriSDL2Internal) === "Object")
	{
		global.Scripts.eval("@set(ZOOM_WINDOW=0)");
		global.Scripts.eval("@set(USE_MENU_LAYER=1)");
	}
}

@if(GAME_FATE||GAME_FHAT)
@set(PATCH_RUBY=1)
@endif

// Wide mode should be independent of hd mode, but this is currently not the case.
@if(HD_MODE)
@set(WIDE_MODE=1)
@if(GAME_FATE||GAME_FHAT)
@set(SCALE_USING_FLOATING_POINT=1)
@endif
@if(GAME_WOHN)
@set(SCALE_USING_FLOATING_POINT=0)
@endif
@endif
@set(CROP_MODE=0)
@set(EDGE_BLUR_HQ=1)

{
	var version_as_string = "v";
	var PatchVersion = global.PatchVersion;
	for (var i = 0, internal_forloop_count = PatchVersion.count; i < internal_forloop_count; i += 1)
	{
		var elm = PatchVersion[i];
		if (typeof(elm) === "Integer")
		{
			if (i !== 0)
			{
				version_as_string += ".";
			}
			version_as_string += elm;
		}
		else if (typeof(elm) === "String")
		{
			version_as_string += elm;
		}
	}
	global.PatchDescription = global.PatchDescription.replace(/%VERSION%/g, version_as_string);
}

// Ensure patch version gets placed in the log
global.Debug.notice(("Patch Description: %s").sprintf(global.PatchDescription));

{
	var basepath = "";
	var arcdelim = global.System.getArgument("-arcdelim");
	if (!arcdelim)
	{
		arcdelim = ">";
	}
	var currentpath = global.Storages.getFullPath("./");
	if (currentpath.indexOf(arcdelim) === -1)
	{
		basepath = global.Storages.getFullPath("../");
	}
	else
	{
		basepath = global.System.exePath;
	}
	global.devMode = ((("" + global.System.getArgument('-devmode')).indexOf("1") !== -1) || global.Storages.isExistentStorage(basepath + "dev.txt") || global.Storages.isExistentStorage(basepath + "devmode.txt"));
	global.devMode2 = ((("" + global.System.getArgument('-devmode')).indexOf("2") !== -1) || global.Storages.isExistentStorage(basepath + "dev2.txt") || global.Storages.isExistentStorage(basepath + "devmode2.txt"));
	global.forceLog = ((global.System.getArgument('-forcelog') !== void) || global.Storages.isExistentStorage(basepath + "forceLog.txt"));
	global.useUnencryptedXP3Archive = ((global.System.getArgument('-useunencryptedxp3archive') !== void) || global.Storages.isExistentStorage(basepath + "useunencryptedxp3archive.txt"));

	var version_info_path = "patch_versioninfo.tjs";
	try
	{
		if (global.Storages.isExistentStorage(version_info_path))
		{
			var verinfo = global.Scripts.execStorage(version_info_path);
			// Ensure patch info gets put in the log
			global.Debug.notice(("Patch Commit: %s").sprintf(verinfo.hexsha));
			global.Debug.notice(("Patch Creation Time: %i").sprintf(verinfo.archive_created_time));
		}
	}
	catch (e)
	{
		// pass
	}

	try
	{
		// Ensure executable info gets put in the log
		if (typeof(global.System.exeName) === "String")
		{
			global.Debug.notice(("Executable Name: %s").sprintf(global.System.exeName));
		}
		if (typeof(global.System.exeBits) === "Integer")
		{
			global.Debug.notice(("Executable Bits: %i").sprintf(global.System.exeBits));
		}
	}
	catch (e)
	{
		// pass
	}

	// Override settings
	var settingsPath = basepath + "settings.tjs";
	if (global.Storages.isExistentStorage(settingsPath))
	{
		var _ = global.Scripts.evalStorage(settingsPath);
	}

	global.typemoon_repo_root = void;
	if (global.devMode)
	{
		global.typemoon_repo_root = global.Storages.getFullPath(basepath + "/../");
		global.Storages.addAutoPath(global.typemoon_repo_root + "common/data/");
		global.Storages.addAutoPath(global.typemoon_repo_root + "common/patch/");
		global.Storages.addAutoPath(global.typemoon_repo_root + "common/plugin/");
		global.Storages.addAutoPath(global.typemoon_repo_root + "common/pluginpatch/");
		global.Storages.addAutoPath(basepath + "/plugin/");
		global.Storages.addAutoPath(basepath + "/pluginpatch/");
	}
}

{
	global.plugin_postfix = "";
	if (global.System.platformName.substring(0, 5) === "Win64" && global.System.exeBits === 64)
	{
		global.plugin_postfix = "_intel64";
	}
	global.get_full_path_of_plugin = function(storage)
	{
		if (storage.indexOf(":") === -1)
		{
			if (global.System.platformName.substring(0, 3) === "Win")
			{
				var plugin_name_mutated = storage;
				plugin_name_mutated = plugin_name_mutated.substring(0, plugin_name_mutated.length - 4) + global.plugin_postfix + plugin_name_mutated.substring(plugin_name_mutated.length - 4, 4);
				var plugin_paths = [
					plugin_name_mutated,
@if(GAME_WOHN)
					global.System.exePath + "content-data/plugin/" + plugin_name_mutated,
@endif
				];
				for (var i = 0, internal_forloop_count = plugin_paths.count; i < internal_forloop_count; i += 1)
				{
					var path = "" + plugin_paths[i];
					if (path !== "" && global.Storages.isExistentStorage(path))
					{
						return path;
					}
				}
			}
			if ((typeof(global.Storages.isExistentPlugin) === "Object") && global.Storages.isExistentPlugin(storage))
			{
				return storage;
			}
		}
		return "";
	};
	global.apply_plugins_link_override = function()
	{
		global.Plugins.link_patch_storages_original = global.Plugins.link;
		global.Plugins.link = function(storage)
		{
			var storage_cur = storage;
			var fullpath = global.get_full_path_of_plugin(storage);
			if (fullpath !== "")
			{
				storage_cur = fullpath;
			}
			return global.Plugins.link_patch_storages_original(storage_cur);
		};
	};
	global.apply_plugins_link_override();
}

{
@if(GAME_FHAT)
	global.mainPatchName = global.devMode ? "data" : "3";
@endif
@if(GAME_FATE||GAME_WOHN)
	global.mainPatchName = global.devMode ? "data" : "";
@endif
}

{
	if (global.forceLog)
	{
		global.Debug.startLogToFile(false);
	}
}

{
	global.KAGLoadScript("patch_initialize.tjs");
}

@endif
